var documenterSearchIndex = {"docs":
[{"location":"comparison_tables_preamble/","page":"-","title":"-","text":"The following autogenerated tables contain a representative set of potential use cases for this package, along with measurements that summarize each case's performance, compilation, and memory usage:","category":"page"},{"location":"comparison_tables_preamble/","page":"-","title":"-","text":"run time (best of several trial measurements)\ncompilation time (as reported by the compiler)\noverall level of optimization (type stability, constant propagation, etc.) and allocations during run time (as reported by the garbage collector)\ntotal allocations during compilation and first run (as reported by the garbage collector and, when possible, the Julia process's resident set size estimator)","category":"page"},{"location":"comparison_tables_preamble/","page":"-","title":"-","text":"The rows of the tables are highlighted as follows:","category":"page"},{"location":"comparison_tables_preamble/","page":"-","title":"-","text":"<span style=\"color:darkturquoise\">light blue </span>\nindicates better optimization and either an improvement or no change in run time, compilation time, and total allocations\n<span style=\"color:royalblue\">dark blue </span>\nindicates better optimization and either slower run time, slower compilation, or more total allocations\n<span style=\"color:mediumseagreen\">green </span>\nindicates similar optimization, either faster run time or fewer allocations during run time, and either an improvement or no change in compilation time and total allocations\n<span style=\"color:khaki\">yellow </span>\nindicates similar optimization, either faster run time or fewer allocations during run time, and either slower compilation or more total allocations\n<span style=\"color:mediumorchid\">magenta </span>\nindicates no change in performance and either an improvement or no change in compilation time and total allocations\n<span style=\"color:silver\">light gray </span>\nindicates no change in performance and either faster compilation with more total allocations or slower compilation with fewer total allocations\n<span style=\"color:gray\">dark gray </span>\nindicates no change in performance, compilation time, or total allocations\n<span style=\"color:indianred\">red </span>\nindicates a deterioration in performance, or no change in performance and either slower compilation or more total allocations","category":"page"},{"location":"comparison_tables_preamble/","page":"-","title":"-","text":"Rows highlighted in gray present no clear advantage to loop unrolling, while those highlighted in red present a clear disadvantage. It is recommended that you only call unrolled functions when your use case is similar to a row in one of the remaining categories, each of which demonstrates some advantage to loop unrolling.","category":"page"},{"location":"comparison_tables_preamble/","page":"-","title":"-","text":"The tables are also printed out by this package's test suite, so they can be compared across different operating systems by consulting the CI pipeline.","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"CurrentModule = UnrolledUtilities","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using UnrolledUtilities, InteractiveUtils, Test","category":"page"},{"location":"user_guide/#When-to-Use-UnrolledUtilities","page":"User Guide","title":"When to Use UnrolledUtilities","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"The functions and types exported by this package tend to perform better than their counterparts from Base and Base.Iterators in the scenarios listed below. Additional examples and more precise measurements can be found in the automatically generated tables of benchmarks.","category":"page"},{"location":"user_guide/#Outline:","page":"User Guide","title":"Outline:","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Pages = [\"user_guide.md\"]\nDepth = 2:3","category":"page"},{"location":"user_guide/#When-to-Use-Unrolled-Functions","page":"User Guide","title":"When to Use Unrolled Functions","text":"","category":"section"},{"location":"user_guide/#Long-iterators","page":"User Guide","title":"Long iterators","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"map has an unstable return type for iterators with lengths greater than 32:\nTest.@inferred map(one, Tuple(1:31));\nTest.@inferred map(one, Tuple(1:32));\nTest.@inferred unrolled_map(one, Tuple(1:32));\ngetindex has an unstable return type for Core.Const slices of length N > 10 from iterators with lengths greater than N + 2:\nfirst_11(itr) = itr[1:11]\nTest.@inferred first_11(Tuple(1:13));\nTest.@inferred first_11(Tuple(1:14));\nunrolled_first_11(itr) = unrolled_take(itr, Val(11))\nTest.@inferred unrolled_first_11(Tuple(1:14));\nFor benchmarks that indicate performance improvements when using unrolled functions with long iterators, see Isolated Unrolled Functions","category":"page"},{"location":"user_guide/#Iterators-with-elements-of-different-types","page":"User Guide","title":"Iterators with elements of different types","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"in has an intermediate type instability that triggers allocations for nonuniform iterators:\n@allocated () in ((1, 2), (1, 2, 3))\n@allocated unrolled_in((), ((1, 2), (1, 2, 3)))\nany, all, and foreach have intermediate type instabilities that trigger allocations for nonuniform iterators with lengths greater than 32:\nconst nonuniform_itr_of_length_32 = (ntuple(Returns((1, 2)), 31)..., (1, 2, 3));\nconst nonuniform_itr_of_length_33 = (ntuple(Returns((1, 2)), 32)..., (1, 2, 3));\n@allocated any(isempty, nonuniform_itr_of_length_32)\n@allocated any(isempty, nonuniform_itr_of_length_33)\n@allocated unrolled_any(isempty, nonuniform_itr_of_length_33)\ngetindex has an unstable return type for nonuniform iterators when given non-constant (i.e., not Core.Const) indices, which can lead to intermediate type instabilities that trigger allocations:\nfunction add_lengths(itr)\n    length_sum = 0\n    for n in 1:length(itr)\n        length_sum += length(itr[n])\n    end\nend\nadd_lengths(((1, 2), (1, 2, 3))) # hide\n@allocated add_lengths(((1, 2), (1, 2, 3)))\nfunction unrolled_add_lengths(itr)\n    length_sum = 0\n    for n in 1:length(itr)\n        length_sum += unrolled_applyat(length, n, itr)\n    end\nend\nunrolled_add_lengths(((1, 2), (1, 2, 3))) # hide\n@allocated unrolled_add_lengths(((1, 2), (1, 2, 3)))\nnote: Note\nHow can unrolled_applyat be stable if n isn't a Core.Const?For the example of add_lengths, the compiler must infer the return type of itr[::Int64] before it can compile the call to length. Since this return type depends on the index n, the compiler needs to insert a runtime lookup into the method table that determines which method of length to call, length(::Tuple{Int64, Int64}) or length(::Tuple{Int64, Int64, Int64}), and this triggers allocations.For the example of unrolled_add_lengths, the compiler instead infers the return types of itr[::Core.Const(1)], itr[::Core.Const(2)], and so on for every index into itr. Then, it compiles a call to length for each of these return types, and it inserts a runtime switch instruction that determines which result of length to return for a particular value of n. As long as length itself only returns one type (in this case, Int64), this ensures that unrolled_add_lengths has no intermediate type instabilities.In other words, unrolled_applyat combines multiple methods for length and getindex into a single method, replacing the inefficient method table lookup that switches between them with a simpler switch instruction.\ntip: Tip\nWhen should getindex be replaced with unrolled_applyat?The specific example above could be simplified by using mapreduce, instead of using a for-loop in conjunction with unrolled_applyat:@allocated mapreduce(length, +, ((1, 2), (1, 2, 3)))However, there are often situations in which it is not possible to replace loops with function calls, like when those loops are parallelized over CPU or GPU threads. Moreover, CUDA is unable to compile any kernels with type instabilities that trigger allocations, so unrolled_applyat is required in order to parallelize over nonuniform iterators on GPUs.\nFor benchmarks that indicate performance improvements when using unrolled functions with nonuniform iterators, see Isolated Unrolled Functions and Nested Unrolled Functions","category":"page"},{"location":"user_guide/#Reduction-operations-with-non-constant-return-types","page":"User Guide","title":"Reduction operations with non-constant return types","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"reduce and accumulate have unstable return types when the return type of op is not constant, but only for iterator lengths greater than 32:\nTest.@inferred reduce(tuple, Tuple(1:32));\nTest.@inferred reduce(tuple, Tuple(1:33));\nTest.@inferred unrolled_reduce(tuple, Tuple(1:33));\nFor benchmarks that indicate performance improvements when using unrolled functions with nonuniform reductions, see Isolated Unrolled Functions","category":"page"},{"location":"user_guide/#Operations-with-more-than-2-levels-of-recursion","page":"User Guide","title":"Operations with more than 2 levels of recursion","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"All functions in Julia have a default \"recursion limit\" of 2; unless this limit is modified, it forces any function that recursively calls itself 2 or more times to have an unstable return type:\nrecursive_length(itr) =\n    eltype(itr) <: Tuple ? mapreduce(recursive_length, +, itr) : length(itr)\nTest.@inferred recursive_length(((1, 2), (1, 2, 3)));\nTest.@inferred recursive_length((((1,), (2,)), (1, 2, 3)));\nunrolled_recursive_length(itr) =\n    eltype(itr) <: Tuple ?\n    unrolled_mapreduce(unrolled_recursive_length, +, itr) : length(itr)\nTest.@inferred unrolled_recursive_length((((1,), (2,)), (1, 2, 3)));\nnote: Note\nIs there any other way to avoid the default recursion limit?The default recursion limit applies to all functions defined in Base and Base.Iterators, so those functions will have unstable return types for more than 2 levels of recursion, even when all user-defined functions passed to them have had their recursion limits disabled. It is also impossible to modify the recursion limits of functions defined in Base from external packages. This means that the only way to avoid the default recursion limit is to not use certain functions from Base, and instead to define alternatives without any recursion limits.\nFor benchmarks that indicate performance improvements when using unrolled functions with recursive operations, see Recursive Unrolled Functions","category":"page"},{"location":"user_guide/#When-to-Use-StaticOneTo-and-StaticBitVector","page":"User Guide","title":"When to Use StaticOneTo and StaticBitVector","text":"","category":"section"},{"location":"user_guide/#Iterators-of-Ints-from-1-to-N","page":"User Guide","title":"Iterators of Ints from 1 to N","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"StaticOneTo","category":"page"},{"location":"user_guide/#UnrolledUtilities.StaticOneTo","page":"User Guide","title":"UnrolledUtilities.StaticOneTo","text":"StaticOneTo(N)\n\nA lazy and statically sized analogue of Base.OneTo(N).\n\nThis iterator can only store the integers from 1 to N, so its output_type_for_promotion is NoOutputType(). An efficient method is provided for unrolled_take, but no other unrolled functions can use StaticOneTos as output types.\n\n\n\n\n\n","category":"type"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"If an iterator only contains the integers from 1 to N ≥ 0, it is possible to provide the compiler with the values in the iterator in addition to their types by using a StaticOneTo, as opposed to a Tuple or something similar. This can allow the compiler to fully optimize out code that depends on those values, essentially moving the code's execution from run time to compilation time:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"@code_llvm debuginfo=:none mapreduce(abs2, +, (1, 2, 3))\n@code_llvm debuginfo=:none mapreduce(abs2, +, StaticOneTo(3))","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Standard library functions can sometimes take advantage of this optimization, but for most non-trivial operations it is necessary to use unrolled functions:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"@code_llvm debuginfo=:none mapreduce(log, +, StaticOneTo(3))\n@code_llvm debuginfo=:none unrolled_mapreduce(log, +, StaticOneTo(3))","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"For benchmarks that indicate performance improvements when using StaticOneTos, see Very Long Iterators.","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"note: Note\nCan the compiler infer iterator values in other scenarios?The compiler can usually infer the values of iterators that only contain singletons when they are accessed using Core.Const indices, but this is not possible for non-singletons (e.g., integers) unless some special type of iterator is used (e.g., a StaticOneTo).","category":"page"},{"location":"user_guide/#Long-iterators-of-Bools-that-get-modified-across-loop-iterations","page":"User Guide","title":"Long iterators of Bools that get modified across loop iterations","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"StaticBitVector","category":"page"},{"location":"user_guide/#UnrolledUtilities.StaticBitVector","page":"User Guide","title":"UnrolledUtilities.StaticBitVector","text":"StaticBitVector{N, [U]}(f)\nStaticBitVector{N, [U]}([bit])\n\nA statically sized analogue of BitVector with Unsigned chunks of type U, which can be constructed using either a function f(n) or a constant bit. By default, U is set to UInt8 and bit is set to false.\n\nThis iterator can only store Bools, so its output_type_for_promotion is a ConditionalOutputType. Efficient implementations are provided for all unrolled functions, though the methods for unrolled_map and unrolled_accumulate only apply when the first item in the output is a Bool.\n\n\n\n\n\n","category":"type"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Loops in Julia often allocate memory when a value larger than 32 bytes in size is modified across loop iterations (regardless of whether the loops are unrolled or not). Since Bools are represented by bytes, this limits certain types of loops to modifying bitmasks of no more than 32 Bools in order to avoid allocations. Unlike an iterator of Bools, though, a StaticBitVector stores 8 bits in every byte, which makes it possible to modify up to 256 bits at a time in loops without any allocations:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"random_bit_flips(itr) = reduce(\n    (itr′, i) -> Base.setindex(itr′, !itr′[rand(1:i)], i),\n    1:length(itr);\n    init = itr,\n)\n@allocated random_bit_flips(ntuple(Returns(true), Val(32))) # hide\n@allocated random_bit_flips(ntuple(Returns(true), Val(32)))\n@allocated random_bit_flips(ntuple(Returns(true), Val(33))) # hide\n@allocated random_bit_flips(ntuple(Returns(true), Val(33)))\n@allocated random_bit_flips(StaticBitVector{256}(true)) # hide\n@allocated random_bit_flips(StaticBitVector{256}(true))","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"As with StaticOneTos, standard library functions can occasionally optimize StaticBitVectors as well as unrolled functions, but most complex use cases require unrolled functions.","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"For benchmarks that indicate performance improvements when using long StaticBitVectors that get modified across loop iterations, see Nested Unrolled Closures.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"using UnrolledUtilities, InteractiveUtils, Test","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"macro code_warntype(_...) nothing end\nmacro code_llvm(_...) nothing end","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"<style>\nsummary {\n  background-color: #3c5dcd;\n  border-radius: 5px;\n  color: white;\n  cursor: pointer;\n  list-style-position: outside;\n  list-style-type: \"⬇\";\n}\nsummary::after {\n  content: \"Click to show long output\";\n  margin-left: 15px;\n}\ndetails[open] summary {\n  list-style-type: \"⬆\";\n}\ndetails[open] summary::after {\n  content: none;\n}\n</style>","category":"page"},{"location":"introduction/#Motivation-for-Loop-Unrolling","page":"Introduction","title":"Motivation for Loop Unrolling","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Although the iteration utilities in Base and Base.Iterators are sufficiently performant for most common use cases, those who choose to dive into the world of low-level optimization will often discover type instabilities in unexpected situations. Here is a particularly simple example:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Test.@inferred map(one, Tuple(1:31));\nTest.@inferred map(one, Tuple(1:32));","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"This type instability is present in all maps over iterators with lengths greater than 31, regardless of whether they are statically sized. As with most type instabilities in Julia, this leads to memory allocations every time map is called with sufficiently long iterators.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Test.@inferred is helpful for checking whether the return type of a function call is stable, but looking directly at the generated LLVM code reveals just how different the two function calls above are:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"@code_llvm debuginfo=:none map(one, Tuple(1:31))","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"<details><summary>","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"@code_llvm debuginfo=:none map(one, Tuple(1:32))","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"</summary>","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"@code_llvm debuginfo=:none map(one, Tuple(1:32)) # hide","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"</details><br>","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The type instability (and all of the resulting LLVM code complexity) in the second function call can be eliminated by replacing map with unrolled_map:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Test.@inferred unrolled_map(one, Tuple(1:32));\n@code_llvm debuginfo=:none unrolled_map(one, Tuple(1:32))","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The minimum iterator length for type instability is not always 32; for instance, it can also be 14:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"first_11(itr) = itr[1:11]\nTest.@inferred first_11(Tuple(1:13));\nTest.@inferred first_11(Tuple(1:14));","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"note: Note\nWhy is the function definition needed in this example?On the first line of the example above, [1:11] is enclosed in a function so that it does not get evaluated in global scope. This turns the range 1:11 into a Core.Const, which the compiler can propagate into the call to getindex in order to infer the length of the result:using InteractiveUtils\nfirst_11(itr) = itr[1:11]@code_warntype first_11(Tuple(1:13))In contrast, running Test.@inferred Tuple(1:13)[1:11] would amount to checking whether the compiler can compute the result type of getindex given only the argument types NTuple{13, Int64} and UnitRange{Int64}, which it cannot do:<details><summary>@code_warntype Tuple(1:13)[1:11]</summary>@code_warntype Tuple(1:13)[1:11] # hide</details><br>","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Although itr[1:10] is always inferrable when itr is a Tuple, itr[1:11] has a type instability whenever itr contains more than 13 items. More generally, itr[1:N] seems to be unstable for all N > 10 whenever itr contains more than N + 2 items. This type instability can be fixed by replacing getindex with unrolled_take:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"unrolled_first_11(itr) = unrolled_take(itr, Val(11))\nTest.@inferred unrolled_first_11(Tuple(1:14));","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Even when the final result of a function is inferred, there can be intermediate steps in the function with type instabilities that trigger allocations:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"function add_lengths(itr)\n    length_sum = 0\n    for n in 1:length(itr)\n        length_sum += length(itr[n])\n    end\nend\nTest.@inferred add_lengths(((1, 2), (1, 2, 3)))\n@allocated add_lengths(((1, 2), (1, 2, 3)))\n@code_warntype add_lengths(((1, 2), (1, 2, 3)))","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The output of @code_warntype is quite cluttered, but the most important detail here is that the call to getindex does not get inferred because it can result in either a Tuple of length 2 or a Tuple of length 3. This type instability can be fixed by replacing getindex with unrolled_applyat:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"function unrolled_add_lengths(itr)\n    length_sum = 0\n    for n in 1:length(itr)\n        length_sum += unrolled_applyat(length, n, itr)\n    end\nend\nunrolled_add_lengths(((1, 2), (1, 2, 3))) # hide\n@allocated unrolled_add_lengths(((1, 2), (1, 2, 3)))\n@code_warntype unrolled_add_lengths(((1, 2), (1, 2, 3)))","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"For a detailed breakdown of when the tools provided by this package can improve performance, see the User Guide.","category":"page"},{"location":"introduction/#What-Does-Loop-Unrolling-Do","page":"Introduction","title":"What Does Loop Unrolling Do","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"When a loop over N indices is unrolled, it gets compiled into N lines of LLVM code, where each line has a constant (Core.Const) index. For example, an unrolled loop that prints every integer from 1 to 33 is compiled into the following:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"<details><summary>","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"@code_llvm debuginfo=:none unrolled_foreach(println, Tuple(1:33))","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"</summary>","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"@code_llvm debuginfo=:none unrolled_foreach(println, Tuple(1:33)) # hide","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"</details><br>","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"This LLVM code consists of 33 getelementptr instructions (each of which extracts a value from a Tuple at a particular index), 33 load instructions, and 33 call instructions (each of which switches execution to println). Every getelementptr instruction has a constant index between 0 and 32; in more complex examples where the call instructions get inlined, this constant index can be propagated into the LLVM code of the function being called. On the other hand, here is the LLVM code for the non-unrolled version of this loop:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"@code_llvm debuginfo=:none foreach(println, Tuple(1:33))","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Although the first getelementptr instruction here has the constant index 0, the other getelementptr instruction has a non-constant integer index. Also, this LLVM code has conditional jump instructions for checking whether the last index of the Tuple has been reached after each getelementptr instruction.","category":"page"},{"location":"introduction/#Downsides-of-Loop-Unrolling","page":"Introduction","title":"Downsides of Loop Unrolling","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"using UnrolledUtilities, Test\ntup32 = ntuple(Returns((1, 2)), 32)","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Given the performance benefits of loop unrolling, it might seem at first that the standard library needs more of it. However, the standard library is not just meant for writing high-performance code with statically sized iterators—many of its use cases involve code that is only executed once or several times. In such cases, most of the execution time is required for compilation, and minimizing run time makes no practical difference. Although unrolled functions can occasionally be faster to compile than non-unrolled functions, they are typically slower to compile, which means that using them instead of standard library functions can often increase total execution time:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"tup32 = ntuple(Returns((1, 2)), 32);\n@elapsed map(first, tup32)\n@elapsed unrolled_map(first, tup32)","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The increase in compilation time is usually no more than a factor of 5 for small iterators, but it grows as iterator length increases:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"tup320 = ntuple(Returns((1, 2)), 320);\n@elapsed map(first, tup320)\n@elapsed unrolled_map(first, tup320)","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Moreover, loop unrolling can sometimes increase the run time of a function in addition to its compilation time:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"@elapsed Tuple(Iterators.product(tup32, tup32)) # compilation time + run time\n@elapsed Tuple(Iterators.product(tup32, tup32)) # only run time\n@elapsed unrolled_product(tup32, tup32) # compilation time + run time\n@elapsed unrolled_product(tup32, tup32) # only run time","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"This increase in run time is most likely due to the larger size of unrolled code, which makes it take longer to load. Nevertheless, loop unrolling still offers the benefit of eliminating the unstable return type in this example:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Test.@inferred Tuple(Iterators.product(tup32, tup32));\nTest.@inferred unrolled_product(tup32, tup32);","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"So, when type instabilities and memory allocations need to be removed (as is required for static compilation) and the cost to total execution time is more or less irrelevant, using unrolled functions is probably worthwhile. Otherwise, if a significant increase in compilation time (and potentially also run time) needs to be avoided, using standard library functions might be a better option.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"It is usually a good idea to compare the performance of unrolled code against non-unrolled code before settling on a particular design. Many examples of such comparisons can be found in the tables of benchmarks that are automatically generated for this package.","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"CurrentModule = UnrolledUtilities","category":"page"},{"location":"developer_guide/#How-to-Unroll","page":"Developer Guide","title":"How to Unroll","text":"","category":"section"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"There are two general ways to implement loop unrolling in Julia—recursively splatting iterator contents and manually generating unrolled expressions. For example, the recursively unrolled version of foreach is","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"unrolled_foreach(f, itr) = _unrolled_foreach(f, itr...)\n_unrolled_foreach(f) = nothing\n_unrolled_foreach(f, item, items...) = (f(item); _unrolled_foreach(f, items...))","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"In contrast, the generatively unrolled version of foreach is","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"unrolled_foreach(f, itr) = _unrolled_foreach(Val(length(itr)), f, itr)\n@generated _unrolled_foreach(::Val{N}, f, itr) where {N} =\n    Expr(:block, (:(f(generic_getindex(itr, $n))) for n in 1:N)..., nothing)","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"To switch between recursive and generative unrolling, this package defines the following function:","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"rec_unroll","category":"page"},{"location":"developer_guide/#UnrolledUtilities.rec_unroll","page":"Developer Guide","title":"UnrolledUtilities.rec_unroll","text":"rec_unroll(itr)\n\nWhether to use recursive loop unrolling instead of generative loop unrolling for the iterator itr.\n\nIn general, recursive loop unrolling is faster to compile for small iterators, but it becomes extremely slow to compile for long iterators, and it usually generates suboptimal LLVM code for long iterators. On the other hand, generative loop unrolling is slow to compile for small iterators, but its compilation time does not grow as rapidly with respect to iterator size, and it always generates optimal LLVM code. The default is currently to use recursive unrolling for iterator lengths up to 16, and to use generative unrolling for longer iterators.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"tip: Tip\nRecursive loop unrolling can be disabled globally with the following function redefinition:rec_unroll(itr) = false","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"The cutoff length of 16 for switching to generative unrolling is motivated by the benchmarks for Generative vs. Recursive Unrolling.","category":"page"},{"location":"developer_guide/#Interface-API","page":"Developer Guide","title":"Interface API","text":"","category":"section"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"The functions exported by this package can be used with any statically sized iterators, as long as those iterators make appropriate use of the following interface:","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"generic_getindex\noutput_type_for_promotion\nAmbiguousOutputType\nNoOutputType\nConditionalOutputType\noutput_promote_rule\nconstructor_from_tuple\nempty_output","category":"page"},{"location":"developer_guide/#UnrolledUtilities.generic_getindex","page":"Developer Guide","title":"UnrolledUtilities.generic_getindex","text":"generic_getindex(itr, n)\n\nIdentical to getindex(itr, n), but with the added ability to handle lazy iterator types defined in the standard library, such as Base.Generator and Base.Iterators.Enumerate.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/#UnrolledUtilities.output_type_for_promotion","page":"Developer Guide","title":"UnrolledUtilities.output_type_for_promotion","text":"output_type_for_promotion(itr)\n\nThe type of output that unrolled functions should try to generate for the input iterator itr, or a ConditionalOutputType if the output type depends on the type of items that need to be stored in it, or NoOutputType() if itr is a lazy iterator without any associated output type. Defaults to Tuple.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/#UnrolledUtilities.AmbiguousOutputType","page":"Developer Guide","title":"UnrolledUtilities.AmbiguousOutputType","text":"AmbiguousOutputType\n\nThe result of output_type_for_promotion for iterators that do not have well-defined output types.\n\n\n\n\n\n","category":"type"},{"location":"developer_guide/#UnrolledUtilities.NoOutputType","page":"Developer Guide","title":"UnrolledUtilities.NoOutputType","text":"NoOutputType()\n\nThe AmbiguousOutputType of lazy iterators.\n\n\n\n\n\n","category":"type"},{"location":"developer_guide/#UnrolledUtilities.ConditionalOutputType","page":"Developer Guide","title":"UnrolledUtilities.ConditionalOutputType","text":"ConditionalOutputType(allowed_item_type, output_type, [fallback_type])\n\nAn AmbiguousOutputType that can have one of two possible values. If the first item in the output is a subtype of allowed_item_type, the output will have the type output_type; otherwise, it will have the type fallback_type, which is set to Tuple by default.\n\n\n\n\n\n","category":"type"},{"location":"developer_guide/#UnrolledUtilities.output_promote_rule","page":"Developer Guide","title":"UnrolledUtilities.output_promote_rule","text":"output_promote_rule(output_type1, output_type2)\n\nThe type of output that should be generated when two iterators do not have the same output_type_for_promotion, or Union{} if these iterators should not be used together. Only one method of output_promote_rule needs to be defined for any pair of output types.\n\nBy default, all types take precedence over NoOutputType(), and the conditional part of any ConditionalOutputType takes precedence over an unconditional type (so that only the fallback_type of any conditional type gets promoted). The default result for all other pairs of unequal output types is Union{}.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/#UnrolledUtilities.constructor_from_tuple","page":"Developer Guide","title":"UnrolledUtilities.constructor_from_tuple","text":"constructor_from_tuple(output_type)\n\nA function that can be used to efficiently construct an output of type output_type from a Tuple, or identity if such an output should not be constructed from a Tuple. Defaults to identity, which also handles the case where output_type is already Tuple. The output_type here is guaranteed to be a Type, rather than a ConditionalOutputType or NoOutputType.\n\nMany statically sized iterators (e.g., SVectors) are essentially wrappers for Tuples, and their constructors for Tuples can be reduced to no-ops. The main exceptions are StaticOneTos and StaticBitVectors, which do not provide constructors for Tuples because there is no performance benefit to making a lazy or low-storage data structure once a corresponding high-storage data structure has already been constructed.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/#UnrolledUtilities.empty_output","page":"Developer Guide","title":"UnrolledUtilities.empty_output","text":"empty_output(output_type)\n\nAn empty output of type output_type. Defaults to applying the constructor_from_tuple for the given type to an empty Tuple.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/#How-to-Use-the-Interface","page":"Developer Guide","title":"How to Use the Interface","text":"","category":"section"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"To unroll over a statically sized iterator of some user-defined type T, follow these steps:","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"To enable recursive unrolling, add a method for iterate(::T, [state])\nTo enable generative unrolling, add a method for getindex(::T, n) (or for generic_getindex(::T, n) if getindex should not be defined for iterators of type T)\nIf every unrolled function that needs to construct an iterator when given an iterator of type T can return a Tuple instead, stop here\nOtherwise, to return a non-Tuple iterator whenever it is efficient to do so, follow these steps:\nAdd a method for output_type_for_promotion(::T) = O, where O can be T, a supertype of T, some other Type, or an AmbiguousOutputType\nIf an iterator whose output type is O can be used together with an iterator whose output type is O′, add a method for output_promote_rule(O, O′)\nIf O is a NoOutputType, stop here\nOtherwise, to handle the unambiguous output type U that underlies O (where U is equivalent to O unless O is a ConditionalOutputType), follow these steps:\nIf an iterator of type U can be efficiently constructed from a Tuple, add a method for constructor_from_tuple(U)\nOtherwise, for each of the following functions, add a method if it can be implemented to construct an iterator of type U without first storing the iterator's contents in a Tuple:\nempty_output(U)\nunrolled_map_into(U, f, itr)\nunrolled_accumulate_into(U, op, itr, init, transform)\nunrolled_push_into(U, itr, item)\nunrolled_append_into(U, itr1, itr2)\nunrolled_take_into(U, itr, val_N)\nunrolled_drop_into(U, itr, val_N)","category":"page"},{"location":"developer_guide/","page":"Developer Guide","title":"Developer Guide","text":"note: Note\nWhen a relevant method for the interface is not defined, unrolled functions will typically fall back to using Tuples instead of other iterator types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using UnrolledUtilities","category":"page"},{"location":"#UnrolledUtilities.jl","page":"Home","title":"UnrolledUtilities.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A toolkit for low-level optimization of Julia code in which iterator sizes are known during compilation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package can be used with all statically sized iterators (Tuples, NamedTuples, StaticArrays, etc.), including ones that are very long or ones that have elements of different types, both of which are cases that Julia's standard library often handles inefficiently. For example, the standard libary function in performs worse than this package's unrolled_in for Tuples with elements of different types:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@allocated () in ((1, 2), (1, 2, 3))\n@allocated unrolled_in((), ((1, 2), (1, 2, 3)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"The loop unrolling automatically performed by this package offers the following benefits for statically sized iterators:","category":"page"},{"location":"","page":"Home","title":"Home","text":"better support for static compilation\ncompilation of executables\ncompilation of GPU kernels\nbetter performance (usually)\nreduced run times\nreduced memory footprints while code is running\nbetter compilation efficiency (occasionally)\nreduced compilation times\nreduced memory footprints while code is compiling","category":"page"},{"location":"","page":"Home","title":"Home","text":"To find out more about loop unrolling and when it is useful, see the Introduction.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package exports a number of analogues to functions from Base and Base.Iterators, each of which has been optimized for statically sized iterators (in terms of both performance and compilation time):","category":"page"},{"location":"","page":"Home","title":"Home","text":"unrolled_any(f, itr)—similar to any\nunrolled_all(f, itr)—similar to all\nunrolled_foreach(f, itrs...)—similar to foreach\nunrolled_map(f, itrs...)—similar to map\nunrolled_reduce(op, itr; [init])—similar to reduce\nunrolled_mapreduce(f, op, itrs...; [init])—similar to mapreduce\nunrolled_accumulate(op, itr; [init], [transform])—similar to accumulate, but with a transform that can be applied to every value in the output\nunrolled_push(itr, item)—similar to push!, but non-mutating\nunrolled_append(itr1, itr2)—similar to append!, but non-mutating\nunrolled_take(itr, ::Val{N})—similar to Iterators.take (i.e., itr[1:N]), but with N wrapped in a Val\nunrolled_drop(itr, ::Val{N})—similar to Iterators.drop (i.e., itr[(N + 1):end]), but with N wrapped in a Val\nunrolled_in(item, itr)—similar to in\nunrolled_unique(itr)—similar to unique\nunrolled_filter(f, itr)—similar to filter\nunrolled_flatten(itr)—similar to Iterators.flatten\nunrolled_flatmap(f, itrs...)—similar to Iterators.flatmap\nunrolled_product(itrs...)—similar to Iterators.product","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, this package exports two functions that do not have public analogues in Base or Base.Iterators:","category":"page"},{"location":"","page":"Home","title":"Home","text":"unrolled_applyat(f, n, itrs...)—similar to f(itrs[1][n], itrs[2][n], ...), but with a Core.Const index in every call to getindex\nunrolled_split(f, itr)—similar to (filter(f, itr), filter(!f, itr)), but without duplicate calls to f","category":"page"},{"location":"","page":"Home","title":"Home","text":"These unrolled functions are compatible with the following types of iterators:","category":"page"},{"location":"","page":"Home","title":"Home","text":"statically sized iterators from Base (e.g., Tuple and NamedTuple)\nstatically sized iterators from StaticArrays (e.g., SVector and MVector)\nlazy iterators from Base (e.g., the results of enumerate, zip, Iterators.map, and generator expressions) that are used as wrappers for statically sized iterators","category":"page"},{"location":"","page":"Home","title":"Home","text":"They are also compatible with two new types of statically sized iterators exported by this package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"StaticOneTo—similar to Base.OneTo\nStaticBitVector—similar to BitVector","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the User Guide for additional information about these new types of iterators.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Developer Guide to learn how user-defined iterator types can be made compatible with unrolled functions.","category":"page"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"The following autogenerated tables contain a representative set of potential use cases for this package, along with measurements that summarize each case's performance, compilation, and memory usage:","category":"page"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"run time (best of several trial measurements)\ncompilation time (as reported by the compiler)\noverall level of optimization (type stability, constant propagation, etc.) and allocations during run time (as reported by the garbage collector)\ntotal allocations during compilation and first run (as reported by the garbage collector and, when possible, the Julia process's resident set size estimator)","category":"page"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"The rows of the tables are highlighted as follows:","category":"page"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<span style=\"color:darkturquoise\">light blue </span>\nindicates better optimization and either an improvement or no change in run time, compilation time, and total allocations\n<span style=\"color:royalblue\">dark blue </span>\nindicates better optimization and either slower run time, slower compilation, or more total allocations\n<span style=\"color:mediumseagreen\">green </span>\nindicates similar optimization, either faster run time or fewer allocations during run time, and either an improvement or no change in compilation time and total allocations\n<span style=\"color:khaki\">yellow </span>\nindicates similar optimization, either faster run time or fewer allocations during run time, and either slower compilation or more total allocations\n<span style=\"color:mediumorchid\">magenta </span>\nindicates no change in performance and either an improvement or no change in compilation time and total allocations\n<span style=\"color:silver\">light gray </span>\nindicates no change in performance and either faster compilation with more total allocations or slower compilation with fewer total allocations\n<span style=\"color:gray\">dark gray </span>\nindicates no change in performance, compilation time, or total allocations\n<span style=\"color:indianred\">red </span>\nindicates a deterioration in performance, or no change in performance and either slower compilation or more total allocations","category":"page"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"Rows highlighted in gray present no clear advantage to loop unrolling, while those highlighted in red present a clear disadvantage. It is recommended that you only call unrolled functions when your use case is similar to a row in one of the remaining categories, each of which demonstrates some advantage to loop unrolling.","category":"page"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"The tables are also printed out by this package's test suite, so they can be compared across different operating systems by consulting the CI pipeline.","category":"page"},{"location":"comparison_tables/#Isolated-Unrolled-Functions","page":"Comparison Tables","title":"Isolated Unrolled Functions","text":"","category":"section"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Itr Type</th>\n      <th style = \"text-align: left;\">Itr Length</th>\n      <th style = \"text-align: left;\">Itr Contents</th>\n      <th style = \"text-align: left;\">Optimization</th>\n      <th style = \"text-align: left;\">Run Time</th>\n      <th style = \"text-align: left;\">Compilation Time</th>\n      <th style = \"text-align: left;\">Total Allocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 22 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (184 kB vs. 193 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (209 kB vs. 390 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (23 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (211 kB vs. 392 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (30 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (800 kB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (50 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (1 MB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (50 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (64 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (2 MB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (33 ms vs. 26 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (966 kB vs. 486 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (50 ms vs. 27 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 486 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (50 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 486 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (66 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (3 MB vs. 486 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (35 ms vs. 27 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1015 kB vs. 522 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ms vs. 27 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (2 MB vs. 522 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ms vs. 27 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (2 MB vs. 522 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (64 ms vs. 27 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (5 MB vs. 523 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (30 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (801 kB vs. 887 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 27 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (50 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 470 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (63 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (2 MB vs. 470 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (44 ms vs. 50 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (52 ms vs. 58 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (51 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (2 MB vs. 624 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">25 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (63 ms vs. 30 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (3 MB vs. 624 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 57 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 73 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 35 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">52 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (49 ms vs. 31 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (2 MB vs. 678 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 521 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">950 times less (40 ns vs. 38 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (66 ms vs. 31 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 49 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (898 kB vs. 931 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 50 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (945 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 50 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (923 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ns vs. 69 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (65 ms vs. 55 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (140 ns vs. 140 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (83 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (140 ns vs. 140 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (86 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (611 ns vs. 440 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (117 ms vs. 55 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ns vs. 69 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (62 ms vs. 52 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (130 ns vs. 140 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (83 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (140 ns vs. 140 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (84 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (410 ns vs. 440 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (117 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ns vs. 69 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (67 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (140 ns vs. 140 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (82 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (140 ns vs. 150 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (82 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (410 ns vs. 441 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (117 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (7 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 96 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">27 times less (69 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (82 ms vs. 82 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 496 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">152 times less (130 ns vs. 20 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (83 ms vs. 89 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (3 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">Tuple</td>\n      <td style = \"color: khaki; text-align: left;\">33</td>\n      <td style = \"color: khaki; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: khaki; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: khaki; text-align: left;\">2 times less (140 ns vs. 380 ns)</td>\n      <td style = \"color: khaki; text-align: left;\">similar (83 ms vs. 55 ms)</td>\n      <td style = \"color: khaki; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">Tuple</td>\n      <td style = \"color: khaki; text-align: left;\">128</td>\n      <td style = \"color: khaki; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: khaki; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: khaki; text-align: left;\">3 times less (420 ns vs. 1 μs)</td>\n      <td style = \"color: khaki; text-align: left;\">2 times more (116 ms vs. 52 ms)</td>\n      <td style = \"color: khaki; text-align: left;\">3 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 96 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">189 times less (69 ns vs. 13 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (82 ms vs. 83 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 496 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">637 times less (130 ns vs. 83 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (86 ms vs. 92 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (3 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">Tuple</td>\n      <td style = \"color: khaki; text-align: left;\">33</td>\n      <td style = \"color: khaki; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: khaki; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: khaki; text-align: left;\">2 times less (140 ns vs. 380 ns)</td>\n      <td style = \"color: khaki; text-align: left;\">similar (84 ms vs. 52 ms)</td>\n      <td style = \"color: khaki; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: khaki; text-align: left;\">Tuple</td>\n      <td style = \"color: khaki; text-align: left;\">128</td>\n      <td style = \"color: khaki; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: khaki; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: khaki; text-align: left;\">3 times less (410 ns vs. 1 μs)</td>\n      <td style = \"color: khaki; text-align: left;\">2 times more (123 ms vs. 53 ms)</td>\n      <td style = \"color: khaki; text-align: left;\">3 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 3 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">205 times less (69 ns vs. 14 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (89 ms vs. 87 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 38 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">673 times less (140 ns vs. 94 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (91 ms vs. 112 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (3 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 35 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times less (140 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (82 ms vs. 55 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 521 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">97 times less (410 ns vs. 40 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (117 ms vs. 61 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (7 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (185 kB vs. 207 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (23 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (209 kB vs. 388 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (23 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (211 kB vs. 382 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 30 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (944 kB vs. 453 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (50 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 453 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (50 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 453 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (59 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (3 MB vs. 453 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (30 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (802 kB vs. 435 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (49 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (1 MB vs. 435 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (50 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 435 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (61 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (2 MB vs. 435 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (33 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (874 kB vs. 451 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 451 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (47 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (2 MB vs. 451 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (57 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (4 MB vs. 452 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (30 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (858 kB vs. 990 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 28 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 60 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (50 ms vs. 29 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (2 MB vs. 615 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 60 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (57 ms vs. 30 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (2 MB vs. 615 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (30 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (803 kB vs. 937 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 29 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (49 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 500 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (59 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (2 MB vs. 500 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (34 ms vs. 27 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (875 kB vs. 969 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 41 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 521 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (57 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (4 MB vs. 524 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 49 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (899 kB vs. 942 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 49 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (946 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 50 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (923 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (61 ms vs. 52 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (82 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (83 ms vs. 51 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (114 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (56 ms vs. 52 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (82 ms vs. 51 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (82 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (113 ms vs. 51 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (59 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (81 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (81 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (113 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (7 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">7 times less (49 ns vs. 370 ns)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (56 ms vs. 53 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">16 times less (49 ns vs. 801 ns)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (83 ms vs. 56 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (83 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (114 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">48 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (56 ms vs. 52 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">58 times less (49 ns vs. 3 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (85 ms vs. 58 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (87 ms vs. 52 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (131 ms vs. 59 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (5 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 560 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">49 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (64 ms vs. 57 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">80 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (88 ms vs. 73 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (84 ms vs. 56 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all((x-&gt;length(x) == rand(8:10)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (117 ms vs. 55 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (7 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (41 ms vs. 60 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (205 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (41 ms vs. 61 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (252 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (42 ms vs. 48 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (231 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (52 ms vs. 60 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (903 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 62 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 64 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">128</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 64 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 61 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (926 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ms vs. 61 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 65 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">128</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 64 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (60 ms vs. 44 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (968 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (67 ms vs. 44 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (66 ms vs. 47 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">128</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 47 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (64 ms vs. 61 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (67 ms vs. 61 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (68 ms vs. 71 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">25 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (74 ms vs. 68 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (64 ms vs. 61 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 64 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (69 ms vs. 70 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">25 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (80 ms vs. 72 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (67 ms vs. 47 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 47 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 35 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">53 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (68 ms vs. 51 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 521 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">960 times less (40 ns vs. 38 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (74 ms vs. 52 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (26 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">18 times more (660 kB vs. 35 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (26 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (669 kB vs. 90 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (30 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">18 times more (674 kB vs. 37 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (38 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (1 MB vs. 647 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 576 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times less (40 ns vs. 781 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (52 ms vs. 26 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 326 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 608 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times less (60 ns vs. 802 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (57 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 326 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">40 times less (60 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (63 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (3 MB vs. 328 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (38 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (2 MB vs. 677 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 576 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times less (40 ns vs. 781 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (52 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 356 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 608 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times less (60 ns vs. 791 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (57 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 356 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">39 times less (60 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (76 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (3 MB vs. 358 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (45 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (2 MB vs. 760 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 576 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times less (40 ns vs. 781 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (55 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (2 MB vs. 328 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 608 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times less (60 ns vs. 791 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (59 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (2 MB vs. 328 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">35 times less (69 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (76 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (4 MB vs. 330 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (51 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (2 MB vs. 823 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 576 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">26 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (53 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 361 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 608 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">21 times less (50 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (57 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 361 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">44 times less (80 ns vs. 4 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (72 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (3 MB vs. 364 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (51 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (2 MB vs. 849 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 576 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">26 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (54 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 386 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 608 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">18 times less (60 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (58 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 MB vs. 386 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">52 times less (69 ns vs. 4 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (78 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (3 MB vs. 388 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (58 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (2 MB vs. 840 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 33 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">69 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (56 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (2 MB vs. 373 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 37 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">51 times less (60 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (60 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (2 MB vs. 377 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 528 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">583 times less (69 ns vs. 40 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (77 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (4 MB vs. 868 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (41 ms vs. 35 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (41 ms vs. 35 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (56 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (75 ms vs. 36 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (76 ms vs. 35 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (97 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (8 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (55 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (78 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (76 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (96 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (8 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (59 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (78 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (5 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (74 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (5 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (97 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (9 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (77 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (76 ms vs. 36 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (80 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (100 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (8 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (52 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (80 ms vs. 35 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (78 ms vs. 35 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (108 ms vs. 36 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (8 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 256 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (49 ns vs. 89 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (80 ms vs. 35 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (49 ns vs. 89 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (83 ms vs. 37 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (5 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (49 ns vs. 90 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (75 ms vs. 34 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (5 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">length(itr[rand(1:7:length(itr))])</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times less (49 ns vs. 281 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (101 ms vs. 46 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (9 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (19 ms vs. 49 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">11 times less (238 kB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (19 ms vs. 49 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">11 times less (264 kB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (22 ms vs. 37 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">11 times less (301 kB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (44 ms vs. 51 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 56 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">28 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (67 ms vs. 57 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">130 times less (40 ns vs. 5 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (73 ms vs. 55 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (52 ms vs. 50 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (67 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (67 ms vs. 57 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">177 times less (40 ns vs. 7 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (73 ms vs. 54 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (54 ms vs. 39 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (72 ms vs. 48 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 5 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">42 times less (60 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (71 ms vs. 45 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 70 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">601 times less (80 ns vs. 48 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (132 ms vs. 44 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (10 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (45 ms vs. 73 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (2 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (67 ms vs. 76 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (8 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (67 ms vs. 78 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">148 times less (40 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (72 ms vs. 77 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (45 ms vs. 73 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (2 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (69 ms vs. 78 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (8 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">34 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (72 ms vs. 79 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">151 times less (40 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (80 ms vs. 85 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (57 ms vs. 62 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (2 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (80 ns vs. 80 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (87 ms vs. 100 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 16 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 53 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">65 times less (80 ns vs. 5 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (82 ms vs. 63 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 784 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">228 times less (391 ns vs. 89 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (260 ms vs. 61 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (22 ms vs. 53 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">7 times less (434 kB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (22 ms vs. 52 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">7 times less (460 kB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (23 ms vs. 43 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">7 times less (463 kB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (44 ms vs. 54 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (75 ms vs. 60 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">28 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (71 ms vs. 60 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">129 times less (40 ns vs. 5 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (78 ms vs. 58 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (9 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (44 ms vs. 53 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (72 ms vs. 56 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">37 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (71 ms vs. 60 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">182 times less (40 ns vs. 7 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (77 ms vs. 58 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (9 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (55 ms vs. 44 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (75 ms vs. 52 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 5 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">52 times less (60 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (76 ms vs. 47 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 70 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">761 times less (69 ns vs. 53 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (137 ms vs. 48 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (11 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (45 ms vs. 77 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (2 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (70 ms vs. 80 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 16 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (71 ms vs. 86 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">148 times less (40 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (78 ms vs. 80 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (45 ms vs. 80 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (2 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 81 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 16 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">27 times less (49 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (74 ms vs. 82 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">148 times less (40 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (83 ms vs. 88 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (50 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (59 ms vs. 67 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (2 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (80 ns vs. 69 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (89 ms vs. 109 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 53 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">62 times less (80 ns vs. 5 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (87 ms vs. 66 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 784 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">254 times less (330 ns vs. 84 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (271 ms vs. 66 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (11 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (26 ms vs. 59 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (814 kB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (26 ms vs. 61 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (966 kB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (31 ms vs. 36 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (52 ms vs. 62 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (85 ms vs. 65 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (10 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (79 ms vs. 65 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (10 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (94 ms vs. 65 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (15 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (54 ms vs. 62 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (80 ms vs. 63 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (10 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (82 ms vs. 65 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (10 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (94 ms vs. 65 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (15 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (76 ms vs. 38 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (10 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (75 ms vs. 40 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (10 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (94 ms vs. 40 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (18 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (53 ms vs. 101 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (3 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (79 ms vs. 99 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (79 ms vs. 91 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">24 times less (40 ns vs. 991 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (95 ms vs. 103 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (15 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (55 ms vs. 104 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (3 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (81 ms vs. 101 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (86 ms vs. 95 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">24 times less (40 ns vs. 991 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (108 ms vs. 96 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (15 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (53 ms vs. 62 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (4 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (80 ms vs. 61 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 35 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">59 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (76 ms vs. 62 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (10 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 521 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">888 times less (40 ns vs. 36 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (94 ms vs. 63 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (18 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (29 ms vs. 61 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (916 kB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (29 ms vs. 61 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (34 ms vs. 37 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (55 ms vs. 61 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (91 ms vs. 64 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (10 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (91 ms vs. 61 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (10 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (103 ms vs. 61 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (16 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (54 ms vs. 62 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (87 ms vs. 62 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (10 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (88 ms vs. 61 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (10 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (107 ms vs. 62 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (16 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (83 ms vs. 40 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (11 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (83 ms vs. 38 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (11 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (101 ms vs. 38 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more (19 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (55 ms vs. 84 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (4 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (87 ms vs. 85 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (10 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (90 ms vs. 86 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">24 times less (40 ns vs. 991 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (105 ms vs. 85 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (16 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (56 ms vs. 84 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (4 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (88 ms vs. 91 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (10 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (92 ms vs. 90 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (10 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">24 times less (40 ns vs. 991 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (118 ms vs. 95 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (16 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (55 ms vs. 61 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (4 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (89 ms vs. 63 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (11 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 35 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">52 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (83 ms vs. 59 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (11 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 521 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">905 times less (40 ns vs. 36 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (102 ms vs. 60 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (19 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (23 ms vs. 36 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (466 kB vs. 776 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 39 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (490 kB vs. 834 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (24 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (548 kB vs. 977 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 88 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (196 ms vs. 272 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">55 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (185 ms vs. 298 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 88 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (185 ms vs. 264 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">46 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (184 ms vs. 299 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (60 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (61 ms vs. 54 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (280 ns vs. 250 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (452 ms vs. 477 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (21 MB vs. 16 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 33 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">23 times less (310 ns vs. 7 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (445 ms vs. 2 s)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (21 MB vs. 18 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 89 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (187 ms vs. 269 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">44 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (186 ms vs. 295 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 100 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (188 ms vs. 266 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">71 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (192 ms vs. 301 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ns vs. 80 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 73 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 μs vs. 3 μs)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 s vs. 2 s)</td>\n      <td style = \"color: gray; text-align: left;\">similar (21 MB vs. 18 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 122 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">11 times less (2 μs vs. 22 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (2 s vs. 9 s)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (21 MB vs. 19 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (27 ms vs. 29 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (906 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (26 ms vs. 29 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (965 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (25 ms vs. 33 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (945 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (65 ms vs. 81 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (186 ms vs. 264 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">54 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (185 ms vs. 289 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (64 ms vs. 81 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (184 ms vs. 259 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">57 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (186 ms vs. 293 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (60 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (75 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (361 ns vs. 331 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (459 ms vs. 464 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (21 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 33 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less (360 ns vs. 7 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (448 ms vs. 2 s)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (21 MB vs. 18 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (66 ms vs. 82 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (195 ms vs. 267 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">70 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (188 ms vs. 295 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (67 ms vs. 84 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (5 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (186 ms vs. 265 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">70 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (201 ms vs. 298 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ns vs. 69 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (85 ms vs. 66 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (5 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 μs vs. 3 μs)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 s vs. 2 s)</td>\n      <td style = \"color: gray; text-align: left;\">similar (21 MB vs. 18 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">accumulate(tuple, itr; init = ())</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 122 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">11 times less (2 μs vs. 22 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (2 s vs. 9 s)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (21 MB vs. 19 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">Inf times more (195 kB vs. 0 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2079 times more (195 kB vs. 96 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (22 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2340 times more (219 kB vs. 96 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1254 times more (196 kB vs. 160 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">580 times more (200 kB vs. 352 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">580 times more (200 kB vs. 352 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">190 times more (214 kB vs. 1 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">784 times more (196 kB vs. 256 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">456 times more (200 kB vs. 448 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">456 times more (200 kB vs. 448 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">175 times more (214 kB vs. 1 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (22 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">588 times more (239 kB vs. 416 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (50 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (24 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">259 times more (301 kB vs. 1 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (1 μs vs. 1 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (23 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">185 times more (220 kB vs. 1 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (5 μs vs. 5 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (23 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">55 times more (234 kB vs. 4 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (25 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1254 times more (196 kB vs. 160 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">580 times more (200 kB vs. 352 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">580 times more (200 kB vs. 352 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">190 times more (214 kB vs. 1 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">784 times more (196 kB vs. 256 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">456 times more (200 kB vs. 448 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (20 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">456 times more (200 kB vs. 448 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (20 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">175 times more (214 kB vs. 1 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (60 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (25 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">313 times more (240 kB vs. 784 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (80 ns vs. 80 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (36 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">112 times more (302 kB vs. 3 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (1 μs vs. 1 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (24 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">79 times more (224 kB vs. 3 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_push(itr, itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr[1])</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (5 μs vs. 5 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (23 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">23 times more (246 kB vs. 11 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">Inf times more (1 MB vs. 0 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">14774 times more (1 MB vs. 96 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (27 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">24048 times more (1 MB vs. 64 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6827 times more (1 MB vs. 208 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">647 times more (1 MB vs. 2 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6827 times more (1 MB vs. 208 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">647 times more (1 MB vs. 2 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (27 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2594 times more (2 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (69 ns vs. 80 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">786 times more (2 MB vs. 2 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (2 μs vs. 2 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (28 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">698 times more (1 MB vs. 2 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (9 μs vs. 9 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (28 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">187 times more (2 MB vs. 8 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6827 times more (1 MB vs. 208 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (32 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">647 times more (1 MB vs. 2 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">6827 times more (1 MB vs. 208 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2345 times more (1 MB vs. 608 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">647 times more (1 MB vs. 2 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (69 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (32 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1174 times more (2 MB vs. 1 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (120 ns vs. 110 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (58 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">321 times more (2 MB vs. 5 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (3 μs vs. 3 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (28 ms vs. 18 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">281 times more (1 MB vs. 5 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_append(itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(itr..., itr...)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (10 μs vs. 10 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (28 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">74 times more (2 MB vs. 21 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (20 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1353 times more (296 kB vs. 224 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (20 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1353 times more (296 kB vs. 224 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (20 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1372 times more (300 kB vs. 224 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1478 times more (485 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 381 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (33 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (513 kB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 390 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (33 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (513 kB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">27 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (34 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (623 kB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1503 times more (493 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 390 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (33 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (521 kB vs. 414 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 380 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (36 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (521 kB vs. 414 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">27 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (35 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (631 kB vs. 414 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1187 times more (594 kB vs. 512 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 592 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">16 times less (49 ns vs. 791 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (34 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (798 kB vs. 415 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 592 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">15 times less (49 ns vs. 781 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (34 ms vs. 28 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (798 kB vs. 415 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">37 times less (60 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (42 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (2 MB vs. 417 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (38 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1505 times more (494 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 176 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">12 times less (40 ns vs. 480 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (33 ms vs. 75 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">18 times less (537 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 176 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (49 ns vs. 480 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (34 ms vs. 72 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less (521 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 576 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">34 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (34 ms vs. 70 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">15 times less (631 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1504 times more (494 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 176 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">49 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (33 ms vs. 69 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less (521 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 176 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">49 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (34 ms vs. 73 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less (521 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 576 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">193 times less (40 ns vs. 8 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (35 ms vs. 77 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">15 times less (631 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (36 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">786 times more (602 kB vs. 784 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 18 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">47 times less (60 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (37 ms vs. 81 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">10 times less (807 kB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 19 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">50 times less (60 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (37 ms vs. 79 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">10 times less (807 kB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:length(itr) ÷ 2]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 268 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">255 times less (120 ns vs. 31 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (67 ms vs. 80 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (2 MB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (23 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1691 times more (370 kB vs. 224 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (26 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1955 times more (428 kB vs. 224 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (23 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1754 times more (439 kB vs. 256 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1400 times more (460 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 390 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (33 ms vs. 27 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (487 kB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">10 times less (40 ns vs. 400 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (34 ms vs. 37 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (489 kB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">27 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (34 ms vs. 27 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (598 kB vs. 389 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1425 times more (468 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 380 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (33 ms vs. 27 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (495 kB vs. 414 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">10 times less (40 ns vs. 410 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (33 ms vs. 27 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (498 kB vs. 414 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">27 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (35 ms vs. 27 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (606 kB vs. 414 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1101 times more (551 kB vs. 512 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 592 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">16 times less (49 ns vs. 791 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (34 ms vs. 27 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (763 kB vs. 415 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 608 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">15 times less (49 ns vs. 741 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (47 ms vs. 27 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (781 kB vs. 415 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">38 times less (60 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (42 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (2 MB vs. 417 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (32 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1427 times more (468 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 176 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (49 ns vs. 480 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (32 ms vs. 68 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">20 times less (496 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">12 times less (40 ns vs. 490 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (34 ms vs. 72 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less (498 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 576 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">35 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (36 ms vs. 69 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">16 times less (606 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (33 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">1426 times more (468 kB vs. 336 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 176 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">50 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (33 ms vs. 69 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">20 times less (495 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">52 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (33 ms vs. 74 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less (498 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 576 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">195 times less (40 ns vs. 8 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (36 ms vs. 75 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">16 times less (605 kB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: indianred; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (60 ns vs. 69 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (37 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">628 times more (559 kB vs. 912 B)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 18 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">41 times less (69 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (43 ms vs. 79 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">10 times less (772 kB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 20 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">46 times less (69 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (38 ms vs. 78 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">10 times less (790 kB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(length(itr) ÷ 2))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[length(itr) ÷ 2 + 1:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 268 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">146 times less (210 ns vs. 31 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (69 ms vs. 79 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (2 MB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (21 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (306 kB vs. 97 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: gray; text-align: left;\">nothing in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (21 ms vs. 22 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (330 kB vs. 265 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: gray; text-align: left;\">nothing in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (329 kB vs. 262 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (28 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (831 kB vs. 297 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (1 MB vs. 297 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (2 MB vs. 297 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (54 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (2 MB vs. 297 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (28 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (831 kB vs. 314 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (2 MB vs. 314 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (49 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (2 MB vs. 314 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (54 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (2 MB vs. 314 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (25 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (825 kB vs. 346 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (43 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (2 MB vs. 346 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (42 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (2 MB vs. 346 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (49 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (3 MB vs. 346 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less (40 ns vs. 89 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (42 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (1 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times less (40 ns vs. 290 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (63 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (2 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times less (40 ns vs. 290 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (63 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (2 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">24 times less (40 ns vs. 991 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (70 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (2 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less (40 ns vs. 89 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (42 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (1 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times less (40 ns vs. 280 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (62 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (2 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times less (40 ns vs. 280 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (64 ms vs. 30 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (2 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. constant)</td>\n      <td style = \"color: royalblue; text-align: left;\">24 times less (40 ns vs. 991 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (76 ms vs. 29 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (2 MB vs. 376 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times less (40 ns vs. 260 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (28 ms vs. 28 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (1017 kB vs. 418 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 32 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">50 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (44 ms vs. 24 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (2 MB vs. 447 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 35 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">54 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (43 ms vs. 24 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (2 MB vs. 451 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 521 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">963 times less (40 ns vs. 39 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (56 ms vs. 25 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (3 MB vs. 937 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (22 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (302 kB vs. 133 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (21 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (327 kB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 22 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (442 kB vs. 277 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 19 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (328 kB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (48 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (1 MB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (47 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (1 MB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (54 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (2 MB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (329 kB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (1 MB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (1 MB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (53 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (31 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (1 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (51 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (3 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (52 ms vs. 34 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (3 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (78 ms vs. 40 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">18 times more (6 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 19 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (328 kB vs. 302 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (47 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (1 MB vs. 302 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (48 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (1 MB vs. 302 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (53 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (2 MB vs. 302 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (24 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (329 kB vs. 478 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (1 MB vs. 478 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (50 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (1 MB vs. 478 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (60 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 478 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 32 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 69 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (32 ms vs. 33 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (1 MB vs. 625 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 32 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 69 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (48 ms vs. 31 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (2 MB vs. 625 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 32 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (49 ns vs. 69 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (49 ms vs. 33 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (2 MB vs. 625 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 32 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (49 ns vs. 69 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (59 ms vs. 31 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (4 MB vs. 625 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (22 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (302 kB vs. 133 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (327 kB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (23 ms vs. 22 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (442 kB vs. 277 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 20 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (328 kB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (50 ms vs. 20 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (1 MB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (48 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (1 MB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (54 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (2 MB vs. 285 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (329 kB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (1 MB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (48 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (1 MB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (53 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (2 MB vs. 477 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (31 ms vs. 27 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (1 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (52 ms vs. 34 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (3 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (52 ms vs. 34 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (3 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (80 ms vs. 41 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">18 times more (6 MB vs. 345 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 19 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (328 kB vs. 302 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (40 ns vs. 130 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (59 ms vs. 37 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (58 ms vs. 40 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (40 ns vs. 80 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (63 ms vs. 42 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 916 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: gray; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (22 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (329 kB vs. 478 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (40 ns vs. 130 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (55 ms vs. 40 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (63 ms vs. 45 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (40 ns vs. 89 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (60 ms vs. 38 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 32 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (40 ns vs. 69 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (33 ms vs. 33 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (1 MB vs. 625 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 3 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">6 times less (40 ns vs. 260 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (49 ms vs. 34 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 5 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">44 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (53 ms vs. 37 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times less (40 ns vs. 300 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (64 ms vs. 33 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (4 MB vs. 736 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 280 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (22 ms vs. 93 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (1 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 290 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (20 ms vs. 89 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">6 times less (1 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 576 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">6 times less (49 ns vs. 320 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (23 ms vs. 105 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (1 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (40 ns vs. 310 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (29 ms vs. 98 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (2 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 391 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (72 ms vs. 95 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 390 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (72 ms vs. 96 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">14 times less (49 ns vs. 731 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (80 ms vs. 96 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 360 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (29 ms vs. 90 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (2 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">11 times less (49 ns vs. 561 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (71 ms vs. 91 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">11 times less (49 ns vs. 581 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (71 ms vs. 91 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 312 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">34 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (74 ms vs. 92 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 576 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times less (60 ns vs. 360 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (661 ms vs. 111 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more (89 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">worse (912 B allocs vs. 576 B allocs)</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more (5 μs vs. 490 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (171 ms vs. 107 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (15 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">worse (944 B allocs vs. 576 B allocs)</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more (6 μs vs. 510 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (173 ms vs. 108 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (15 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">worse (4 kB allocs vs. 576 B allocs)</td>\n      <td style = \"color: indianred; text-align: left;\">24 times more (25 μs vs. 1 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (497 ms vs. 113 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (30 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 640 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">29 times less (49 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (84 ms vs. 349 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">6 times less (6 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">86 times less (49 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (149 ms vs. 346 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (15 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">114 times less (40 ns vs. 5 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (152 ms vs. 346 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (15 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">330 times less (49 ns vs. 16 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (152 ms vs. 353 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (15 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 640 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">55 times less (49 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (100 ms vs. 462 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (6 MB vs. 44 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">124 times less (49 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (150 ms vs. 457 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (15 MB vs. 44 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">132 times less (49 ns vs. 7 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (152 ms vs. 483 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (15 MB vs. 44 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">413 times less (49 ns vs. 20 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (162 ms vs. 489 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (15 MB vs. 44 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 3 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">38 times less (80 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">6 times less (59 ms vs. 386 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (8 MB vs. 29 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">worse (45 kB allocs vs. 34 kB allocs)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (36 μs vs. 7 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (313 ms vs. 356 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (25 MB vs. 29 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">worse (48 kB allocs vs. 37 kB allocs)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (39 μs vs. 8 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (319 ms vs. 376 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (26 MB vs. 29 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fewer allocs (233 kB allocs vs. 525 kB allocs)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (200 μs vs. 62 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (645 ms vs. 366 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (39 MB vs. 30 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (842 kB vs. 855 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 941 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (25 ms vs. 32 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 955 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (26 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 96 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (68 ms vs. 40 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 96 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (69 ms vs. 38 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 96 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (40 ns vs. 170 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (71 ms vs. 39 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (9 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (29 ms vs. 23 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 96 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times less (40 ns vs. 661 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (77 ms vs. 41 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (15 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 96 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">17 times less (40 ns vs. 681 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (77 ms vs. 40 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (15 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 96 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">51 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (117 ms vs. 40 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (35 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (34 ms vs. 29 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">26 times less (49 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (86 ms vs. 68 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (19 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">21 times less (60 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (88 ms vs. 69 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (19 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 5 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">68 times more (309 μs vs. 5 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (253 ms vs. 88 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more (44 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (29 ms vs. 25 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 608 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">20 times less (40 ns vs. 831 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (76 ms vs. 67 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (15 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 672 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">20 times less (40 ns vs. 831 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (77 ms vs. 68 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (15 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">65 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (105 ms vs. 68 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (32 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (30 ms vs. 25 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 608 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">96 times less (40 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (78 ms vs. 91 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (15 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 672 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">106 times less (40 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (83 ms vs. 96 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (16 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">395 times less (40 ns vs. 16 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (115 ms vs. 99 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (36 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (38 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 35 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">84 times less (70 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (97 ms vs. 102 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (19 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 38 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">90 times less (80 ns vs. 7 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (98 ms vs. 101 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (20 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 533 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (291 μs vs. 63 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (268 ms vs. 105 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (46 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 ms vs. 32 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (879 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 ms vs. 30 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (923 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (25 ms vs. 39 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1007 kB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (77 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">20 times less (40 ns vs. 831 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (294 ms vs. 47 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (17 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">21 times less (40 ns vs. 851 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (299 ms vs. 45 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (18 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">56 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">22 times more (1 s vs. 46 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more (47 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (77 ms vs. 24 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">20 times less (40 ns vs. 821 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (292 ms vs. 47 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (17 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">21 times less (40 ns vs. 862 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (302 ms vs. 46 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (18 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 192 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">56 times less (40 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">23 times more (1 s vs. 46 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (47 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (36 ms vs. 28 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (4 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (98 ms vs. 83 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (22 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (100 ms vs. 84 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (23 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 7 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">63 times more (309 μs vs. 5 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (281 ms vs. 103 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more (59 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (77 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">34 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (290 ms vs. 80 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (17 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">35 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (300 ms vs. 81 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (18 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">108 times less (40 ns vs. 4 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (1 s vs. 82 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (46 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (79 ms vs. 26 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">181 times less (40 ns vs. 7 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (292 ms vs. 105 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (17 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">204 times less (40 ns vs. 8 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (318 ms vs. 108 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (18 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">742 times less (40 ns vs. 30 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (1 s vs. 109 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (47 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ms vs. 35 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 68 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">162 times less (70 ns vs. 11 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (103 ms vs. 121 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (22 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 76 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">160 times less (80 ns vs. 13 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (105 ms vs. 113 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (23 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 1 MB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (292 μs vs. 128 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (315 ms vs. 113 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (60 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 24 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (47 ms vs. 36 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 80 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (49 ns vs. 190 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (37 ms vs. 33 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 29 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (105 ms vs. 28 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (11 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (104 ms vs. 28 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (11 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (110 ms vs. 28 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (12 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times less (40 ns vs. 280 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (113 ms vs. 38 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (9 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">17 times less (40 ns vs. 681 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more (392 ms vs. 42 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (38 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times less (49 ns vs. 651 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (401 ms vs. 40 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times more (39 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">41 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 times more (1 s vs. 41 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">35 times more (123 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 208 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times less (49 ns vs. 320 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (50 ms vs. 38 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (11 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 608 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">18 times less (49 ns vs. 912 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (208 ms vs. 46 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (44 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 608 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times less (60 ns vs. 932 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (207 ms vs. 55 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more (46 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">64 times more (188 μs vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (487 ms vs. 66 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">41 times more (142 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 464 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">15 times less (49 ns vs. 751 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (112 ms vs. 75 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">66 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (395 ms vs. 72 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (38 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">69 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (402 ms vs. 73 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (39 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">265 times less (40 ns vs. 11 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times more (1 s vs. 75 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more (123 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 464 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less (49 ns vs. 952 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (116 ms vs. 77 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">87 times less (40 ns vs. 4 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (406 ms vs. 79 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (38 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">87 times less (40 ns vs. 4 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (452 ms vs. 82 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (39 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">347 times less (40 ns vs. 14 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times more (1 s vs. 77 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (126 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 3 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">25 times less (49 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (56 ms vs. 65 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (12 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 35 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (46 μs vs. 6 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (220 ms vs. 62 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (44 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 38 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (47 μs vs. 6 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (220 ms vs. 63 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (45 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 533 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times more (789 μs vs. 54 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (525 ms vs. 65 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (143 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (101 ms vs. 41 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more (18 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">1</td>\n      <td style = \"color: royalblue; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 56 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (40 ns vs. 190 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (101 ms vs. 46 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (18 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">1</td>\n      <td style = \"color: royalblue; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 160 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (49 ns vs. 210 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (87 ms vs. 42 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (19 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (106 ms vs. 43 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (21 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (143 ms vs. 43 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (22 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (143 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (22 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (168 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">13 times more (33 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 104 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times less (40 ns vs. 360 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (173 ms vs. 59 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (27 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 112 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">22 times less (40 ns vs. 911 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (485 ms vs. 59 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (49 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 112 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">22 times less (40 ns vs. 891 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (510 ms vs. 60 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (50 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 120 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">70 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">24 times more (1 s vs. 58 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">35 times more (144 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 288 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times less (49 ns vs. 430 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (105 ms vs. 51 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (30 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 816 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">23 times less (49 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (245 ms vs. 57 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more (56 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 816 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">23 times less (50 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (244 ms vs. 50 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more (58 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 3 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">51 times more (187 μs vs. 4 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (548 ms vs. 51 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">40 times more (169 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 632 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">101 times less (40 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (165 ms vs. 171 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (29 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">359 times less (40 ns vs. 14 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (486 ms vs. 174 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (52 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">307 times less (49 ns vs. 15 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (502 ms vs. 171 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (53 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">1203 times less (49 ns vs. 59 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (2 s vs. 170 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (154 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 552 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">108 times less (49 ns vs. 5 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (171 ms vs. 164 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (29 MB vs. 21 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">432 times less (49 ns vs. 21 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (494 ms vs. 162 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (52 MB vs. 21 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">445 times less (49 ns vs. 22 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (487 ms vs. 162 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (53 MB vs. 21 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">1779 times less (49 ns vs. 87 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (2 s vs. 160 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (156 MB vs. 21 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">91 times less (60 ns vs. 6 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (117 ms vs. 79 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (33 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 40 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (44 μs vs. 24 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (220 ms vs. 73 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (60 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 44 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (47 μs vs. 25 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (273 ms vs. 75 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (61 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 556 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (777 μs vs. 146 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (653 ms vs. 75 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">28 times more (185 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (115 ms vs. 110 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (110 ms vs. 82 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 144 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (49 ns vs. 200 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (69 ms vs. 83 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (11 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">28 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (246 ms vs. 89 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (22 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">396 times less (40 ns vs. 16 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more (893 ms vs. 90 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (74 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 9 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">422 times less (40 ns vs. 17 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (943 ms vs. 90 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (76 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 48 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">28 times less (40 ns vs. 1 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (247 ms vs. 88 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (22 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">392 times less (40 ns vs. 16 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (914 ms vs. 89 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (74 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 9 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">422 times less (40 ns vs. 17 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (941 ms vs. 91 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (77 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (6 μs vs. 2 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (148 ms vs. 86 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (31 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 72 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times more (587 μs vs. 36 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (947 ms vs. 89 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (123 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 77 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">21 times more (821 μs vs. 39 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times more (996 ms vs. 87 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more (128 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 576 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">93 times less (40 ns vs. 4 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (255 ms vs. 123 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (38 MB vs. 26 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 16 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">1260 times less (40 ns vs. 50 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (955 ms vs. 124 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (91 MB vs. 26 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 17 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">1088 times less (49 ns vs. 53 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (971 ms vs. 125 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (93 MB vs. 26 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 576 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">301 times less (40 ns vs. 12 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (259 ms vs. 293 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (38 MB vs. 28 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 24 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4376 times less (40 ns vs. 175 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (962 ms vs. 290 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (91 MB vs. 28 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 26 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4648 times less (40 ns vs. 186 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (1 s vs. 306 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (93 MB vs. 28 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 31 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 μs vs. 17 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (312 ms vs. 392 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (53 MB vs. 27 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 1 MB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (742 μs vs. 349 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (2 s vs. 381 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (154 MB vs. 28 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 1 MB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (795 μs vs. 376 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (2 s vs. 364 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (159 MB vs. 28 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 64 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (149 ms vs. 85 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (15 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 64 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 160 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (148 ms vs. 85 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (16 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">1</td>\n      <td style = \"color: darkturquoise; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 144 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (49 ns vs. 190 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (85 ms vs. 94 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (18 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">201 times less (40 ns vs. 8 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (480 ms vs. 95 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (53 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">201 times less (40 ns vs. 8 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more (472 ms vs. 91 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (54 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 44 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (85 μs vs. 19 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more (1 s vs. 97 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more (94 MB vs. 16 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">890 times less (40 ns vs. 36 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (570 ms vs. 129 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (127 MB vs. 28 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. 8 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4308 times less (40 ns vs. 172 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less (588 ms vs. 1 s)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (127 MB vs. 41 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr, itr, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr, itr, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 293 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (137 μs vs. 260 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (4 s vs. 2 s)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (205 MB vs. 41 MB)</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"},{"location":"comparison_tables/#Nested-Unrolled-Functions","page":"Comparison Tables","title":"Nested Unrolled Functions","text":"","category":"section"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Itr Type</th>\n      <th style = \"text-align: left;\">Itr Length</th>\n      <th style = \"text-align: left;\">Itr Contents</th>\n      <th style = \"text-align: left;\">Optimization</th>\n      <th style = \"text-align: left;\">Run Time</th>\n      <th style = \"text-align: left;\">Compilation Time</th>\n      <th style = \"text-align: left;\">Total Allocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (34 ms vs. 38 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (560 kB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 42 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (64 ms vs. 49 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: gray; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (66 ms vs. 49 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (60 ns vs. 100 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (97 ms vs. 56 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (7 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (59 ms vs. 66 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (3 MB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">126 times less (49 ns vs. 6 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (96 ms vs. 78 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (5 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 3 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (40 ns vs. 230 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (85 ms vs. 67 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (5 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 12 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">24 times less (40 ns vs. 972 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (254 ms vs. 68 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (10 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (42 ms vs. 55 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (1 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (60 ms vs. 63 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (4 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (90 ms vs. 88 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (11 MB vs. 20 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 69 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (98 ms vs. 69 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (11 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (60 ns vs. 89 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (120 ms vs. 63 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (20 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (70 ms vs. 135 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (7 MB vs. 38 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (60 ns vs. 89 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (113 ms vs. 202 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (16 MB vs. 55 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 35 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">56 times less (69 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (113 ms vs. 139 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (16 MB vs. 33 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 521 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">436 times less (120 ns vs. 52 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (243 ms vs. 142 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (31 MB vs. 34 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">singleton Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (64 ms vs. 156 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (3 MB vs. 16 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (75 ms vs. 154 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (4 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (81 ms vs. 154 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (3 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">33</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (81 ms vs. 156 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (3 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (87 ms vs. 155 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (4 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (49 ns vs. 460 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (157 ms vs. 458 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (12 MB vs. 112 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">78 times less (49 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (164 ms vs. 462 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">12 times less (9 MB vs. 112 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">81 times less (49 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (153 ms vs. 459 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">12 times less (9 MB vs. 112 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach(((x1, x2)-&gt;@assert(x1 == x2[1:length(x1)])), itr1, itr2)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">406 times less (40 ns vs. 16 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (159 ms vs. 483 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">11 times less (10 MB vs. 112 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">1</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nonempty Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (130 ns vs. 130 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (62 ms vs. 114 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (5 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (611 ns vs. 621 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (82 ms vs. 124 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (6 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (2 μs vs. 2 μs)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (117 ms vs. 122 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (6 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">33</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (2 μs vs. 2 μs)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (116 ms vs. 124 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (6 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">128</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (9 μs vs. 9 μs)</td>\n      <td style = \"color: gray; text-align: left;\">similar (233 ms vs. 122 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (12 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (2 μs vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (180 ms vs. 257 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (21 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 33 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 μs vs. 16 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (203 ms vs. 247 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (17 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 37 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (10 μs vs. 30 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (205 ms vs. 244 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (17 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 527 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less (38 μs vs. 108 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (511 ms vs. 253 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (25 MB vs. 39 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (87 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more (4 MB vs. 309 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (85 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">15 times more (5 MB vs. 309 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (100 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more (4 MB vs. 309 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (99 ms vs. 43 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more (4 MB vs. 309 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (120 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">26 times more (8 MB vs. 309 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 64 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (49 ns vs. 220 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (180 ms vs. 44 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">37 times more (11 MB vs. 309 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 64 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (49 ns vs. 200 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (165 ms vs. 61 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (10 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 64 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times less (40 ns vs. 210 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (186 ms vs. 71 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (10 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(x1 == unrolled_take(x2, Val(length(x1))))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr1)) @assert itr1[n] == (itr2[n])[1:length(itr1[n])] end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct singleton Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 64 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times less (49 ns vs. 210 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (195 ms vs. 62 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times more (14 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (130 ns vs. 130 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (72 ms vs. 48 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (5 MB vs. 555 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (130 ns vs. 130 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (85 ms vs. 49 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more (7 MB vs. 555 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (130 ns vs. 130 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (133 ms vs. 50 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more (7 MB vs. 555 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">33</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (130 ns vs. 130 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (138 ms vs. 50 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more (7 MB vs. 555 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">128</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (constant)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (130 ns vs. 130 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (262 ms vs. 48 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">29 times more (16 MB vs. 555 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">8</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less (140 ns vs. 380 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (108 ms vs. 59 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (11 MB vs. 896 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times less (130 ns vs. 390 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more (216 ms vs. 50 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">34 times more (19 MB vs. 555 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">33</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 1 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times less (130 ns vs. 391 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (222 ms vs. 61 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times more (19 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">128</td>\n      <td style = \"color: royalblue; text-align: left;\">distinct nonempty Tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">better (constant vs. 4 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times less (130 ns vs. 751 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more (490 ms vs. 66 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times more (30 MB vs. 2 MB)</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"},{"location":"comparison_tables/#Recursive-Unrolled-Functions","page":"Comparison Tables","title":"Recursive Unrolled Functions","text":"","category":"section"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Itr Type</th>\n      <th style = \"text-align: left;\">Itr Length</th>\n      <th style = \"text-align: left;\">Itr Contents</th>\n      <th style = \"text-align: left;\">Optimization</th>\n      <th style = \"text-align: left;\">Run Time</th>\n      <th style = \"text-align: left;\">Compilation Time</th>\n      <th style = \"text-align: left;\">Total Allocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">a Tuple that contains 8 values in nested Tuples of depth 2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (33 ms vs. 39 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 8 values in nested Tuples of depth 3</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 160 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (40 ns vs. 89 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (40 ms vs. 63 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (2 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 8 values in nested Tuples of depth 4</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 352 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (40 ns vs. 210 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (42 ms vs. 95 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (3 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (31 ms vs. 37 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 3</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 544 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (40 ns vs. 100 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (39 ms vs. 63 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (2 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 4</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 544 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (40 ns vs. 89 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (43 ms vs. 99 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (3 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 6</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">20 times less (40 ns vs. 811 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (44 ms vs. 159 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (4 MB vs. 20 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (32 ms vs. 38 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 3</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (40 ns vs. 140 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (40 ms vs. 64 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (2 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 4</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (40 ns vs. 140 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (41 ms vs. 97 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (3 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 6</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 4 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (40 ns vs. 380 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (44 ms vs. 162 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (5 MB vs. 20 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 8</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (optimized out vs. 10 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">74 times less (40 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (48 ms vs. 223 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (6 MB vs. 29 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">a Tuple that contains 8 values in nested Tuples of depth 2</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (41 ms vs. 87 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">7 times less (2 MB vs. 16 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 8 values in nested Tuples of depth 3</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 160 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (49 ns vs. 89 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (45 ms vs. 100 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (4 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 8 values in nested Tuples of depth 4</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 352 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (40 ns vs. 170 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (51 ms vs. 128 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (8 MB vs. 18 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (49 ns vs. 120 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (44 ms vs. 87 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (4 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 3</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 544 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times less (49 ns vs. 250 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (47 ms vs. 118 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times less (5 MB vs. 21 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 4</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 544 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (40 ns vs. 89 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (55 ms vs. 151 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (9 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">2</td>\n      <td style = \"color: royalblue; text-align: left;\">a Tuple that contains 32 values in nested Tuples of depth 6</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times less (49 ns vs. 701 ns)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (184 ms vs. 201 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (54 MB vs. 26 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. type-unstable)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less (60 ns vs. 200 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (96 ms vs. 74 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (12 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 3</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times less (50 ns vs. 390 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (109 ms vs. 129 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (14 MB vs. 22 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 4</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 2 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">9 times less (50 ns vs. 481 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (73 ms vs. 154 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (12 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2</td>\n      <td style = \"color: darkturquoise; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 6</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 4 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">6 times less (60 ns vs. 380 ns)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (192 ms vs. 219 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (54 MB vs. 33 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">2</td>\n      <td style = \"color: royalblue; text-align: left;\">a Tuple that contains 128 values in nested Tuples of depth 8</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 10 kB allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">50 times less (60 ns vs. 3 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more (877 ms vs. 257 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more (425 MB vs. 35 MB)</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"},{"location":"comparison_tables/#Nested-Unrolled-Closures","page":"Comparison Tables","title":"Nested Unrolled Closures","text":"","category":"section"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Itr Type</th>\n      <th style = \"text-align: left;\">Itr Length</th>\n      <th style = \"text-align: left;\">Itr Contents</th>\n      <th style = \"text-align: left;\">Optimization</th>\n      <th style = \"text-align: left;\">Run Time</th>\n      <th style = \"text-align: left;\">Compilation Time</th>\n      <th style = \"text-align: left;\">Total Allocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: khaki; text-align: left;\">reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: khaki; text-align: left;\">Tuple</td>\n      <td style = \"color: khaki; text-align: left;\">32</td>\n      <td style = \"color: khaki; text-align: left;\">Bools</td>\n      <td style = \"color: khaki; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: khaki; text-align: left;\">4 times less (49 ns vs. 210 ns)</td>\n      <td style = \"color: khaki; text-align: left;\">similar (131 ms vs. 133 ms)</td>\n      <td style = \"color: khaki; text-align: left;\">2 times more (17 MB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Bools</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 4 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (11 μs vs. 11 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (162 ms vs. 117 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (15 MB vs. 8 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: indianred; text-align: left;\">StaticBitVector</td>\n      <td style = \"color: indianred; text-align: left;\">256</td>\n      <td style = \"color: indianred; text-align: left;\">Bools</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (3 μs vs. 4 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (163 ms vs. 106 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (12 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(((itr′, i)-&gt;Base.setindex(itr′, !(itr′[i]), i)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: indianred; text-align: left;\">StaticBitVector</td>\n      <td style = \"color: indianred; text-align: left;\">257</td>\n      <td style = \"color: indianred; text-align: left;\">Bools</td>\n      <td style = \"color: indianred; text-align: left;\">identical (32 kB allocs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (88 μs vs. 89 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (164 ms vs. 110 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (12 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;unrolled_reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(((itr′, i)-&gt;reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">32</td>\n      <td style = \"color: royalblue; text-align: left;\">Bools</td>\n      <td style = \"color: royalblue; text-align: left;\">better (type-stable vs. 192 B allocs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (4 μs vs. 5 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">similar (244 ms vs. 173 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more (28 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;unrolled_reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">reduce(((itr′, i)-&gt;reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Bools</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fewer allocs (87 kB allocs vs. 136 kB allocs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (366 μs vs. 378 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (193 ms vs. 160 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (18 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;unrolled_reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(((itr′, i)-&gt;reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">StaticBitVector</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Bools</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 192 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (807 μs vs. 1 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (202 ms vs. 150 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (14 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;unrolled_reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">reduce(((itr′, i)-&gt;reduce(((itr′′, j)-&gt;Base.setindex(itr′′, !(itr′′[min(i, j)]), j)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">StaticBitVector</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">257</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Bools</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fewer allocs (8 MB allocs vs. 8 MB allocs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (23 ms vs. 23 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (209 ms vs. 157 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (22 MB vs. 20 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;unrolled_reduce(((itr′′, j)-&gt;unrolled_reduce(((itr′′′, k)-&gt;Base.setindex(itr′′′, !(itr′′′[min(i, j, k)]), k)), StaticOneTo(length(itr′′)); init = itr′′)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(((itr′, i)-&gt;reduce(((itr′′, j)-&gt;reduce(((itr′′′, k)-&gt;Base.setindex(itr′′′, !(itr′′′[min(i, j, k)]), k)), StaticOneTo(length(itr′′)); init = itr′′)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Bools</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 7 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (136 μs vs. 174 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (263 ms vs. 199 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (29 MB vs. 17 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;unrolled_reduce(((itr′′, j)-&gt;unrolled_reduce(((itr′′′, k)-&gt;Base.setindex(itr′′′, !(itr′′′[min(i, j, k)]), k)), StaticOneTo(length(itr′′)); init = itr′′)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">reduce(((itr′, i)-&gt;reduce(((itr′′, j)-&gt;reduce(((itr′′′, k)-&gt;Base.setindex(itr′′′, !(itr′′′[min(i, j, k)]), k)), StaticOneTo(length(itr′′)); init = itr′′)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Bools</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fewer allocs (3 MB allocs vs. 4 MB allocs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (13 ms vs. 14 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (199 ms vs. 179 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (22 MB vs. 21 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_reduce(((itr′, i)-&gt;unrolled_reduce(((itr′′, j)-&gt;unrolled_reduce(((itr′′′, k)-&gt;Base.setindex(itr′′′, !(itr′′′[min(i, j, k)]), k)), StaticOneTo(length(itr′′)); init = itr′′)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">reduce(((itr′, i)-&gt;reduce(((itr′′, j)-&gt;reduce(((itr′′′, k)-&gt;Base.setindex(itr′′′, !(itr′′′[min(i, j, k)]), k)), StaticOneTo(length(itr′′)); init = itr′′)), StaticOneTo(length(itr′)); init = itr′)), StaticOneTo(length(itr)); init = itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">StaticBitVector</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Bools</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 56 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (216 ms vs. 268 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (251 ms vs. 172 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (16 MB vs. 17 MB)</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"},{"location":"comparison_tables/#Empty-Iterators","page":"Comparison Tables","title":"Empty Iterators","text":"","category":"section"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Itr Type</th>\n      <th style = \"text-align: left;\">Itr Length</th>\n      <th style = \"text-align: left;\">Itr Contents</th>\n      <th style = \"text-align: left;\">Optimization</th>\n      <th style = \"text-align: left;\">Run Time</th>\n      <th style = \"text-align: left;\">Compilation Time</th>\n      <th style = \"text-align: left;\">Total Allocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_any(error, itr)</td>\n      <td style = \"color: gray; text-align: left;\">any(error, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">0</td>\n      <td style = \"color: gray; text-align: left;\">nothing</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 ms vs. 19 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (121 kB vs. 84 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_all(error, itr)</td>\n      <td style = \"color: gray; text-align: left;\">all(error, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">0</td>\n      <td style = \"color: gray; text-align: left;\">nothing</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (19 ms vs. 19 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (121 kB vs. 85 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_foreach(error, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">foreach(error, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">0</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nothing</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (19 ms vs. 38 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">7 times less (121 kB vs. 856 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">0</td>\n      <td style = \"color: indianred; text-align: left;\">nothing</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (26 ms vs. 19 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">21 times more (508 kB vs. 23 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_reduce(error, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">reduce(error, itr; init = 0)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">0</td>\n      <td style = \"color: mediumorchid; text-align: left;\">nothing</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (22 ms vs. 49 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (318 kB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(error, itr)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(error, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">0</td>\n      <td style = \"color: gray; text-align: left;\">nothing</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (24 ms vs. 28 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (385 kB vs. 252 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">unrolled_accumulate(error, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">accumulate(error, itr; init = 0)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">0</td>\n      <td style = \"color: gray; text-align: left;\">nothing</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (23 ms vs. 26 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (474 kB vs. 302 kB)</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"},{"location":"comparison_tables/#Very-Long-Iterators","page":"Comparison Tables","title":"Very Long Iterators","text":"","category":"section"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Itr Type</th>\n      <th style = \"text-align: left;\">Itr Length</th>\n      <th style = \"text-align: left;\">Itr Contents</th>\n      <th style = \"text-align: left;\">Optimization</th>\n      <th style = \"text-align: left;\">Run Time</th>\n      <th style = \"text-align: left;\">Compilation Time</th>\n      <th style = \"text-align: left;\">Total Allocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_reduce(+, itr)</td>\n      <td style = \"color: khaki; text-align: left;\">reduce(+, itr)</td>\n      <td style = \"color: khaki; text-align: left;\">Tuple</td>\n      <td style = \"color: khaki; text-align: left;\">2000</td>\n      <td style = \"color: khaki; text-align: left;\">Ints</td>\n      <td style = \"color: khaki; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: khaki; text-align: left;\">6 times less (140 ns vs. 912 ns)</td>\n      <td style = \"color: khaki; text-align: left;\">32 times more (2 s vs. 55 ms)</td>\n      <td style = \"color: khaki; text-align: left;\">21 times more (67 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(+, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(+, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">StaticOneTo</td>\n      <td style = \"color: indianred; text-align: left;\">2000</td>\n      <td style = \"color: indianred; text-align: left;\">Ints</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (237 ms vs. 59 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (23 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(+, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(+, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">StaticOneTo</td>\n      <td style = \"color: indianred; text-align: left;\">8186</td>\n      <td style = \"color: indianred; text-align: left;\">Ints</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">17 times more (1 s vs. 65 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">24 times more (70 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(log, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(log, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">2000</td>\n      <td style = \"color: indianred; text-align: left;\">Ints</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (11 μs vs. 13 μs)</td>\n      <td style = \"color: indianred; text-align: left;\">28 times more (1 s vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">55 times more (197 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(log, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(log, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">StaticOneTo</td>\n      <td style = \"color: royalblue; text-align: left;\">2000</td>\n      <td style = \"color: royalblue; text-align: left;\">Ints</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">325 times less (40 ns vs. 13 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more (642 ms vs. 73 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">42 times more (126 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(log, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(log, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">StaticOneTo</td>\n      <td style = \"color: royalblue; text-align: left;\">8186</td>\n      <td style = \"color: royalblue; text-align: left;\">Ints</td>\n      <td style = \"color: royalblue; text-align: left;\">better (optimized out vs. type-stable)</td>\n      <td style = \"color: royalblue; text-align: left;\">1326 times less (40 ns vs. 53 μs)</td>\n      <td style = \"color: royalblue; text-align: left;\">69 times more (5 s vs. 73 ms)</td>\n      <td style = \"color: royalblue; text-align: left;\">166 times more (494 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(+, Val(length(itr)))</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(+, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">StaticOneTo</td>\n      <td style = \"color: indianred; text-align: left;\">8186</td>\n      <td style = \"color: indianred; text-align: left;\">Ints</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (475 ms vs. 59 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more (34 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(+, Val(length(itr)))</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(+, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">StaticOneTo</td>\n      <td style = \"color: indianred; text-align: left;\">8187</td>\n      <td style = \"color: indianred; text-align: left;\">Ints</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (475 ms vs. 58 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more (34 MB vs. 3 MB)</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"},{"location":"comparison_tables/#Generative-vs.-Recursive-Unrolling","page":"Comparison Tables","title":"Generative vs. Recursive Unrolling","text":"","category":"section"},{"location":"comparison_tables/","page":"Comparison Tables","title":"Comparison Tables","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Itr Type</th>\n      <th style = \"text-align: left;\">Itr Length</th>\n      <th style = \"text-align: left;\">Itr Contents</th>\n      <th style = \"text-align: left;\">Optimization</th>\n      <th style = \"text-align: left;\">Run Time</th>\n      <th style = \"text-align: left;\">Compilation Time</th>\n      <th style = \"text-align: left;\">Total Allocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (47 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (1 MB vs. 108 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (46 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more (1 MB vs. 108 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (47 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (1 MB vs. 109 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 30 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 698 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 31 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 39 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (66 ms vs. 71 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (81 ms vs. 195 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (4 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 33 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 864 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 35 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 39 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (54 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (79 ms vs. 76 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (3 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (84 ms vs. 215 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (5 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 907 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 40 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (52 ms vs. 48 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 39 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (66 ms vs. 70 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (5 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (88 ms vs. 164 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (8 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 31 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 699 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 33 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 35 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (54 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (64 ms vs. 70 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (80 ms vs. 192 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (4 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (52 ms vs. 46 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 55 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 56 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (41 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 55 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (66 ms vs. 93 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (3 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (83 ms vs. 217 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (5 MB vs. 26 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 50 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 62 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (52 ms vs. 71 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 57 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (70 ms vs. 101 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (5 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (92 ms vs. 192 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (8 MB vs. 27 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (48 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (1 MB vs. 108 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (47 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more (1 MB vs. 108 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (45 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (1 MB vs. 109 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 842 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (59 ms vs. 74 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (3 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (72 ms vs. 200 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times less (4 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 30 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 700 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 31 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 33 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (59 ms vs. 72 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (72 ms vs. 196 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (4 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 765 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 36 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 46 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (60 ms vs. 67 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (3 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (75 ms vs. 156 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (6 MB vs. 24 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (55 ms vs. 32 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 756 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 32 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 35 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 48 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (58 ms vs. 71 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (70 ms vs. 193 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (4 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 31 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 701 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 32 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (52 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (51 ms vs. 36 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (60 ms vs. 70 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (73 ms vs. 196 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">6 times less (4 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 766 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 38 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 49 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 36 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (61 ms vs. 68 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (3 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_all(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (75 ms vs. 158 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (6 MB vs. 24 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (66 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (1 MB vs. 133 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (65 ms vs. 41 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (1 MB vs. 155 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (64 ms vs. 42 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (1 MB vs. 134 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 51 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 807 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (70 ms vs. 57 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 56 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (74 ms vs. 93 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (86 ms vs. 216 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8 times less (3 MB vs. 24 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 829 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ms vs. 58 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (72 ms vs. 56 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (76 ms vs. 94 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (84 ms vs. 219 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8 times less (3 MB vs. 24 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 55 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 864 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (70 ms vs. 57 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (70 ms vs. 67 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 59 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (76 ms vs. 92 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (4 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (87 ms vs. 179 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (6 MB vs. 24 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (72 ms vs. 67 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (77 ms vs. 73 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 74 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 75 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (74 ms vs. 111 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (83 ms vs. 236 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">7 times less (3 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 66 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (72 ms vs. 74 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 76 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 75 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (79 ms vs. 115 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (2 MB vs. 9 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (87 ms vs. 239 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">7 times less (3 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 69 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (67 ms vs. 79 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 89 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (70 ms vs. 77 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">128</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (79 ms vs. 110 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (4 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">256</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (88 ms vs. 200 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less (6 MB vs. 26 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (48 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more (1 MB vs. 106 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (47 ms vs. 30 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more (1 MB vs. 106 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (46 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more (1 MB vs. 107 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 34 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 941 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ms vs. 43 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">632 times less (60 ns vs. 38 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (52 ms vs. 39 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">6729 times less (69 ns vs. 464 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (60 ms vs. 79 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">5 times less (2 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">256</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">9749 times less (191 ns vs. 2 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less (70 ms vs. 214 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">9 times less (3 MB vs. 29 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (50 ms vs. 35 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 963 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (53 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ms vs. 44 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">757 times less (50 ns vs. 38 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (53 ms vs. 39 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (1 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">7088 times less (69 ns vs. 489 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (69 ms vs. 79 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">5 times less (2 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">256</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">9240 times less (190 ns vs. 2 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (95 ms vs. 209 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">9 times less (3 MB vs. 29 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (46 ms vs. 37 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1000 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (46 ms vs. 41 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ms vs. 54 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">980 times less (49 ns vs. 48 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (53 ms vs. 42 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (2 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8922 times less (69 ns vs. 616 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (71 ms vs. 76 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less (4 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">256</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">14539 times less (190 ns vs. 3 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (101 ms vs. 175 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less (6 MB vs. 29 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 52 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 56 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (48 ms vs. 65 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1710 times less (60 ns vs. 103 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (57 ms vs. 60 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (1 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">10708 times less (69 ns vs. 739 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (69 ms vs. 98 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">5 times less (2 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">256</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">12862 times less (180 ns vs. 2 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (97 ms vs. 234 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">9 times less (3 MB vs. 30 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 48 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ms vs. 57 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ms vs. 67 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (1 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1716 times less (60 ns vs. 103 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (53 ms vs. 59 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (1 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">10710 times less (69 ns vs. 739 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (71 ms vs. 99 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">5 times less (2 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">256</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">12195 times less (190 ns vs. 2 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (102 ms vs. 233 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">9 times less (3 MB vs. 30 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (47 ms vs. 51 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (48 ms vs. 67 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (1 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ms vs. 77 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (2 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1926 times less (60 ns vs. 116 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (54 ms vs. 63 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (2 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">13529 times less (69 ns vs. 934 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (71 ms vs. 96 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less (4 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_map(length, itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">256</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (constant)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">16682 times less (180 ns vs. 3 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (97 ms vs. 192 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less (6 MB vs. 31 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (69 ms vs. 47 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (68 ms vs. 42 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">1</td>\n      <td style = \"color: gray; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (65 ms vs. 42 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 55 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (79 ms vs. 59 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">23 times less (49 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (87 ms vs. 62 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">71 times less (50 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (100 ms vs. 105 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">142 times less (49 ns vs. 7 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (129 ms vs. 241 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (12 MB vs. 32 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (77 ms vs. 55 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (76 ms vs. 66 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (79 ms vs. 69 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">23 times less (49 ns vs. 1 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (77 ms vs. 59 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">72 times less (49 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (99 ms vs. 104 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">176 times less (40 ns vs. 7 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (126 ms vs. 238 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (12 MB vs. 32 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 59 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (72 ms vs. 60 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (constant)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (77 ms vs. 68 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (5 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 1 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">36 times less (49 ns vs. 2 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (79 ms vs. 63 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (5 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 4 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">150 times less (40 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (103 ms vs. 100 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (constant vs. 8 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">265 times less (49 ns vs. 13 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (137 ms vs. 205 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (16 MB vs. 31 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (76 ms vs. 84 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 82 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (88 ms vs. 87 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">66 times less (49 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (82 ms vs. 87 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">125 times less (49 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (100 ms vs. 129 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">197 times less (49 ns vs. 10 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (134 ms vs. 269 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (12 MB vs. 33 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (75 ms vs. 53 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (81 ms vs. 55 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (82 ms vs. 91 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">64 times less (49 ns vs. 3 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (81 ms vs. 88 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (4 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">123 times less (49 ns vs. 6 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (103 ms vs. 133 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (8 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 16 B allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">198 times less (49 ns vs. 10 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (168 ms vs. 268 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (13 MB vs. 33 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">8</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 58 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (3 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 86 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (4 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (77 ms vs. 100 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (5 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 4 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">81 times less (49 ns vs. 4 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (79 ms vs. 90 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (5 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 14 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">193 times less (49 ns vs. 9 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (107 ms vs. 129 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (9 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.gen_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">UnrolledUtilities.rec_unrolled_applyat(length, rand(1:7:length(itr)), itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">Tuple</td>\n      <td style = \"color: darkturquoise; text-align: left;\">256</td>\n      <td style = \"color: darkturquoise; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">better (type-stable vs. 27 kB allocs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">348 times less (49 ns vs. 17 μs)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar (141 ms vs. 231 ms)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less (16 MB vs. 33 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (75 ms vs. 21 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">61 times more (7 MB vs. 123 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (72 ms vs. 22 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">61 times more (7 MB vs. 123 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (68 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">61 times more (7 MB vs. 124 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (70 ms vs. 44 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (8 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">16</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (69 ms vs. 69 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (74 ms vs. 123 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (73 ms vs. 131 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (71 ms vs. 43 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (8 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">16</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (73 ms vs. 71 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 126 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (77 ms vs. 132 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (72 ms vs. 55 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (8 MB vs. 1 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">16</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (78 ms vs. 98 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (8 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (81 ms vs. 181 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">826 times less (49 ns vs. 40 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less (82 ms vs. 180 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar (8 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (75 ms vs. 53 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (8 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (71 ms vs. 79 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 6 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (75 ms vs. 232 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (8 MB vs. 21 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">33</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (73 ms vs. 249 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (8 MB vs. 23 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (70 ms vs. 45 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (8 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (75 ms vs. 82 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (75 ms vs. 269 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (8 MB vs. 24 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">33</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (74 ms vs. 288 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (8 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (60 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (76 ms vs. 61 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (8 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (60 ns vs. 60 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (76 ms vs. 107 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (8 MB vs. 7 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (80 ns vs. 80 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (89 ms vs. 312 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (8 MB vs. 25 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.gen_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">UnrolledUtilities.rec_unrolled_reduce(tuple, itr, ())</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1906 times less (80 ns vs. 153 μs)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less (91 ms vs. 329 ms)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less (8 MB vs. 26 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">empty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (183 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">43 times more (18 MB vs. 435 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (183 ms vs. 25 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">38 times more (18 MB vs. 493 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">1</td>\n      <td style = \"color: indianred; text-align: left;\">nonempty non-singleton Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (49 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (185 ms vs. 23 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">39 times more (18 MB vs. 472 kB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (184 ms vs. 63 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (19 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">16</td>\n      <td style = \"color: indianred; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (184 ms vs. 92 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (19 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (193 ms vs. 157 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical empty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (191 ms vs. 164 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (187 ms vs. 65 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more (19 MB vs. 2 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">16</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (197 ms vs. 99 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (19 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">32</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (194 ms vs. 160 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 10 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (206 ms vs. 172 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 11 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (60 ns vs. 60 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (197 ms vs. 72 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more (19 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">16</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (80 ns vs. 80 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (223 ms vs. 119 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more (19 MB vs. 5 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">32</td>\n      <td style = \"color: indianred; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (370 ns vs. 351 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (471 ms vs. 227 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (20 MB vs. 12 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">33</td>\n      <td style = \"color: gray; text-align: left;\">identical nonempty non-singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: gray; text-align: left;\">similar (361 ns vs. 371 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (460 ms vs. 236 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (20 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (191 ms vs. 66 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more (19 MB vs. 3 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (185 ms vs. 108 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (19 MB vs. 13 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (195 ms vs. 389 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (20 MB vs. 49 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">33</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct empty &amp; nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (191 ms vs. 407 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (20 MB vs. 52 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (188 ms vs. 64 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (19 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: gray; text-align: left;\">Tuple</td>\n      <td style = \"color: gray; text-align: left;\">16</td>\n      <td style = \"color: gray; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: gray; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: gray; text-align: left;\">similar (40 ns vs. 49 ns)</td>\n      <td style = \"color: gray; text-align: left;\">similar (194 ms vs. 119 ms)</td>\n      <td style = \"color: gray; text-align: left;\">similar (19 MB vs. 14 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (194 ms vs. 440 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (20 MB vs. 56 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">Tuple</td>\n      <td style = \"color: mediumorchid; text-align: left;\">33</td>\n      <td style = \"color: mediumorchid; text-align: left;\">distinct nonempty singleton Tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">identical (optimized out)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">similar (40 ns vs. 40 ns)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less (195 ms vs. 467 ms)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times less (20 MB vs. 60 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">8</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (70 ns vs. 80 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (206 ms vs. 80 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more (19 MB vs. 4 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple</td>\n      <td style = \"color: indianred; text-align: left;\">16</td>\n      <td style = \"color: indianred; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: indianred; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (381 ns vs. 440 ns)</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more (391 ms vs. 153 ms)</td>\n      <td style = \"color: indianred; text-align: left;\">similar (19 MB vs. 15 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: silver; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: silver; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: silver; text-align: left;\">Tuple</td>\n      <td style = \"color: silver; text-align: left;\">32</td>\n      <td style = \"color: silver; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: silver; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: silver; text-align: left;\">similar (1 μs vs. 2 μs)</td>\n      <td style = \"color: silver; text-align: left;\">3 times more (2 s vs. 499 ms)</td>\n      <td style = \"color: silver; text-align: left;\">2 times less (20 MB vs. 59 MB)</td>\n    </tr>\n    <tr>\n      <td style = \"color: silver; text-align: left;\">UnrolledUtilities.gen_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: silver; text-align: left;\">UnrolledUtilities.rec_unrolled_accumulate(tuple, itr, (), identity)</td>\n      <td style = \"color: silver; text-align: left;\">Tuple</td>\n      <td style = \"color: silver; text-align: left;\">33</td>\n      <td style = \"color: silver; text-align: left;\">distinct nonempty non-singleton Tuples</td>\n      <td style = \"color: silver; text-align: left;\">identical (type-stable)</td>\n      <td style = \"color: silver; text-align: left;\">similar (2 μs vs. 2 μs)</td>\n      <td style = \"color: silver; text-align: left;\">3 times more (2 s vs. 537 ms)</td>\n      <td style = \"color: silver; text-align: left;\">3 times less (20 MB vs. 63 MB)</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"}]
}
