var documenterSearchIndex = {"docs":
[{"location":"comparison_table/#Comparison-Table","page":"Comparison Table","title":"Comparison Table","text":"","category":"section"},{"location":"comparison_table/","page":"Comparison Table","title":"Comparison Table","text":"<div style=\"width: max(80vw, 100%)\">\n<table style = \"font-family: monospace; font-size: 70%;\">\n  <caption style = \"text-align: center;\">Comparison of UnrolledUtilities to Base and Base.Iterators</caption>\n  <thead>\n    <tr class = \"header headerLastRow\">\n      <th style = \"text-align: left;\">Unrolled Expression</th>\n      <th style = \"text-align: left;\">Reference Expression</th>\n      <th style = \"text-align: left;\">Iterator Contents</th>\n      <th style = \"text-align: left;\">Unrolled Performance</th>\n      <th style = \"text-align: left;\">Reference Performance</th>\n      <th style = \"text-align: left;\">Unrolled Compilation Time</th>\n      <th style = \"text-align: left;\">Unrolled Compilation Memory</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">73 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">63 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(error, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(error, itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(error, itr, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">230 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">111 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(error, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(error, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">55 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">23 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">35 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">50 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: khaki; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: khaki; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">14 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">46 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumorchid; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumorchid; text-align: left;\">5 times slower</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">28 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">28 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">41 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">34 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">18 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">19 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">19 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">17 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">23 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">20 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">22 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">34 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">28 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">20 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">18 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">24 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">19 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">27 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">23 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">any(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">22 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">52 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">27 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">23 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">33 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">39 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">56 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">27 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">38 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">57 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">58 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">26 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">24 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">34 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">26 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">23 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">18 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">28 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: khaki; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: khaki; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">27 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumorchid; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumorchid; text-align: left;\">3 times slower</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">22 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">27 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">all(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">3 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">3 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach((x-&gt;@assert(length(x) &lt;= 7)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">254 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">91 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">135 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">48 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">234 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">88 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">36 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">38 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">32 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">25 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">map(length, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">24 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">20 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">18 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">12 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">17 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">26 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">17 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">14 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">13 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">reduce(tuple, itr; init = ())</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">20 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">28 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">28 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">27 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">25 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">26 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">19 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">32 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">20 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">20 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">21 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">17 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">22 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce(length, +, itr; init = 0)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">18 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_zip(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(zip(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_enumerate(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(enumerate(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">nothing in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(nothing, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">nothing in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">66 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">28 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">25 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">37 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">35 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">34 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">35 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">42 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[1], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[1] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">61 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">8 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">30 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">3 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">29 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-unstable</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-unstable</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">35 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-unstable</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-unstable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: indianred; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">3 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-unstable</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">type-unstable</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_in(itr[end], itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">itr[end] in itr</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_unique(itr)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(unique(itr))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">161 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">22 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">164 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">20 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">51 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">18 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">158 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">19 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">118 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">35 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">71 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">81 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">27 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">filter(!isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">142 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">129 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">48 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">103 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">115 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">34 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">67 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">64 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">35 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">34 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">17 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_split(isempty, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">(filter(isempty, itr), filter(!isempty, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">34 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">20 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">22 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">10 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">19 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">20 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatten(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatten(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">15 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">22 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">13 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">15 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: indianred; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">15 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">21 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_flatmap(reverse, itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.flatmap(reverse, itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">9 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr))</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">1 empty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">12 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">22 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">21 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">24 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">21 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: indianred; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: indianred; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">21 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat((x-&gt;@assert(length(x) &lt;= 7)), rand(1:length(itr)), itr)</td>\n      <td style = \"color: royalblue; text-align: left;\">@assert length(itr[rand(1:length(itr))]) &lt;= 7</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">23 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">31 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">21 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">13 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumorchid; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times slower</td>\n      <td style = \"color: mediumorchid; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">13 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_any((x-&gt;unrolled_reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">any((x-&gt;reduce(+, x) &gt; 7), itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">11 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty non-singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumorchid; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: mediumorchid; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumorchid; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumorchid; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times slower</td>\n      <td style = \"color: mediumorchid; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_mapreduce((x-&gt;unrolled_reduce(+, x)), max, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">mapreduce((x-&gt;reduce(+, x)), max, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">1 singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: khaki; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: khaki; text-align: left;\">8 identical singleton tuples</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: khaki; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: khaki; text-align: left;\">32 identical singleton tuples</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: khaki; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: khaki; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: khaki; text-align: left;\">33 identical singleton tuples</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">fully optimized out</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n      <td style = \"color: khaki; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">2 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">3 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 nonempty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">const return value</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">9 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_foreach(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">foreach(((x2, x3)-&gt;@assert(x2 == map(Val, x3))), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">1 singleton tuple</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">8 singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">11 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">32 singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">13 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">33 singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">7 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">14 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">22 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x1, x2)-&gt;@assert(length(x1) &lt; length(x2))), rand(1:length(itr1)), itr1, itr2)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr1)) @assert length(itr1[n]) &lt; length(itr2[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">128 singleton tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">10 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">22 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">1 nonempty tuple</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">7 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">8 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">4 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">8 nonempty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">32 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">32 nonempty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">16 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">33 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">9 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">33 nonempty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">28 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: indianred; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: indianred; text-align: left;\">128 identical nonempty tuples</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">const return value</td>\n      <td style = \"color: indianred; text-align: left;\">6 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">15 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_applyat(((x2, x3)-&gt;@assert(x2 == unrolled_map(Val, x3))), rand(1:length(itr2)), itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">let n = rand(1:length(itr2)) @assert itr2[n] == map(Val, itr3[n]) end</td>\n      <td style = \"color: royalblue; text-align: left;\">128 nonempty tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">const return value</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">13 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1 singleton tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 identical singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 identical singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 identical singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 identical singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">1 tuple</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 identical tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">6 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 identical tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">5 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 identical tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">5 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 identical tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_zip(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(zip(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr1, itr2))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 singleton tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr1, itr2))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_product(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(Iterators.product(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr1, itr2))</td>\n      <td style = \"color: royalblue; text-align: left;\">32 identical singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_product(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(Iterators.product(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr1, itr2)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr1, itr2))</td>\n      <td style = \"color: royalblue; text-align: left;\">33 identical singleton tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_product(itr1, itr2)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(Iterators.product(itr1, itr2))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr1, itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr1, itr2, itr3))</td>\n      <td style = \"color: royalblue; text-align: left;\">1 tuple</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">unrolled_product(itr1, itr2, itr3)</td>\n      <td style = \"color: royalblue; text-align: left;\">Tuple(Iterators.product(itr1, itr2, itr3))</td>\n      <td style = \"color: royalblue; text-align: left;\">8 identical tuples</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">5 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_product(itr1, itr2, itr3)</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">Tuple(Iterators.product(itr1, itr2, itr3))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">8 tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">30 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">23 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">100 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">94 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">63 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">35 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">36 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">35 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">108 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">102 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">84 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">35 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">similar</td>\n      <td style = \"color: darkturquoise; text-align: left;\">36 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">35 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">109 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">102 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">4 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">84 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">60 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">3 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">60 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">2 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">47 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">156 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">7 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">149 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_take(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[1:7]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">110 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 empty tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">17 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 identical nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">18 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 identical nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">5 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">19 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 empty and nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">14 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">58 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 nonempty singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">fully optimized out</td>\n      <td style = \"color: darkturquoise; text-align: left;\">12 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">54 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: darkturquoise; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: darkturquoise; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: darkturquoise; text-align: left;\">8 nonempty non-singleton tuples</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">type-stable</td>\n      <td style = \"color: darkturquoise; text-align: left;\">16 times faster</td>\n      <td style = \"color: darkturquoise; text-align: left;\">51 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 empty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">17 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 identical nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">17 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 identical nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">14 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">52 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">6 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">49 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">32 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 empty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">17 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 identical nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">17 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 identical nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">2 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">13 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">51 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">6 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">49 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">4 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">33 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 empty tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">19 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 identical nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">3 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">19 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 identical nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">6 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 empty and nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">6 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">50 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 nonempty singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">7 times faster</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">48 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">unrolled_drop(itr, Val(7))</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">itr[8:end]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 nonempty non-singleton tuples</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">15 times less</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">8 values in nested tuples of depth 2</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">24 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">8 values in nested tuples of depth 3</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">8 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">8 values in nested tuples of depth 4</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">32 values in nested tuples of depth 2</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">23 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">32 values in nested tuples of depth 3</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">32 values in nested tuples of depth 4</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">32 values in nested tuples of depth 6</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">128 values in nested tuples of depth 2</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">fully optimized out</td>\n      <td style = \"color: indianred; text-align: left;\">25 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">8 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">128 values in nested tuples of depth 3</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">7 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">128 values in nested tuples of depth 4</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">128 values in nested tuples of depth 6</td>\n      <td style = \"color: royalblue; text-align: left;\">fully optimized out</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else length(x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 values in nested tuples of depth 8</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">fully optimized out</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: indianred; text-align: left;\">8 values in nested tuples of depth 2</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">type-stable</td>\n      <td style = \"color: indianred; text-align: left;\">5 times slower</td>\n      <td style = \"color: indianred; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">8 values in nested tuples of depth 3</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">8 values in nested tuples of depth 4</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">32 values in nested tuples of depth 2</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">type-unstable</td>\n      <td style = \"color: royalblue; text-align: left;\">4 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">32 values in nested tuples of depth 3</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">32 values in nested tuples of depth 4</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">32 values in nested tuples of depth 6</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">128 values in nested tuples of depth 2</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">type-unstable</td>\n      <td style = \"color: royalblue; text-align: left;\">6 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times more</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">128 values in nested tuples of depth 3</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">3 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">128 values in nested tuples of depth 4</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: royalblue; text-align: left;\">128 values in nested tuples of depth 6</td>\n      <td style = \"color: royalblue; text-align: left;\">type-stable</td>\n      <td style = \"color: royalblue; text-align: left;\">allocating</td>\n      <td style = \"color: royalblue; text-align: left;\">2 times slower</td>\n      <td style = \"color: royalblue; text-align: left;\">similar</td>\n    </tr>\n    <tr>\n      <td style = \"color: mediumseagreen; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple unrolled_mapreduce(var&quot;#self#&quot;, +, x) else unrolled_reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">(map((x-&gt;if eltype(x) &lt;: Tuple mapreduce(var&quot;#self#&quot;, +, x) else reduce(+, x) end), (itr,)))[1]</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">128 values in nested tuples of depth 8</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">type-stable</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">allocating</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n      <td style = \"color: mediumseagreen; text-align: left;\">similar</td>\n    </tr>\n  </tbody>\n</table>\n</div>","category":"page"},{"location":"#UnrolledUtilities.jl","page":"Home","title":"UnrolledUtilities.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A collection of generated functions in which all loops are unrolled and inlined:","category":"page"},{"location":"","page":"Home","title":"Home","text":"unrolled_any(f, itr): similar to any\nunrolled_all(f, itr): similar to all\nunrolled_foreach(f, itrs...): similar to foreach\nunrolled_map(f, itrs...): similar to map\nunrolled_reduce(op, itr; [init]): similar to reduce\nunrolled_mapreduce(f, op, itrs...; [init]): similar to mapreduce\nunrolled_zip(itrs...): similar to zip\nunrolled_enumerate(itrs...): similar to enumerate, but with the ability to handle multiple iterators\nunrolled_in(item, itr): similar to in\nunrolled_unique(itr): similar to unique\nunrolled_filter(f, itr): similar to filter\nunrolled_split(f, itr): similar to (filter(f, itr), filter(!f, itr)), but without duplicate calls to f\nunrolled_flatten(itr): similar to Iterators.flatten\nunrolled_flatmap(f, itrs...): similar to Iterators.flatmap\nunrolled_product(itrs...): similar to Iterators.product\nunrolled_applyat(f, n, itrs...): similar to f(map(itr -> itr[n], itrs)...)\nunrolled_take(itr, ::Val{N}): similar to itr[1:N] (and to Iterators.take), but with N wrapped in a Val\nunrolled_drop(itr, ::Val{N}): similar to itr[(N + 1):end] (and to Iterators.drop), but with N wrapped in a Val","category":"page"},{"location":"","page":"Home","title":"Home","text":"These functions are guaranteed to be type-stable whenever they are given iterators with inferrable lengths and element types, including when","category":"page"},{"location":"","page":"Home","title":"Home","text":"the iterators have many elements (e.g., more than 32, which is when map, reduce, and mapreduce tend to stop getting compiled efficiently)\nthe iterators have nonuniform element types (most functions from Base and Base.Iterators tend to encounter type-instabilities and allocations when this is the case, especially when there are more than 32 elements)\nf and/or op recursively call the function to which they are passed, up to an arbitrarily large recursion depth (e.g., if f calls map(f, itrs), it will be type-unstable when the recursion depth exceeds 2, but this will not be the case with unrolled_map)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, these functions have been written in a way that makes them very likely to get fully optimized out through constant propagation when the iterators have singleton element types (and when the result of calling f and/or op on these elements is inferrable). However, they can also be much more expensive to compile than their counterparts from Base and Base.Iterators, in which case they should not be used unless there is a clear performance benefit. Some notable exceptions to this are unrolled_zip, unrolled_take, and unrolled_drop, which tend to be easier to compile than zip, Iterators.take, Iterators.drop, and standard indexing notation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more precise indication of whether you should use UnrolledUtilities, please consult the autogenerated Comparison Table. This table contains a comprehensive set of potential use cases, each with a measurement of performance optimization, the time required for compilation, and the memory usage during compilation. Most cases involve simple functions f and/or op, but the last few demonstrate the benefits of unrolling with non-trivial recursive functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The rows of the table are highlighted as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"green indicates an improvement in performance and either no change in compilation or easier compilation (i.e., either similar or smaller values of compilation time and memory usage)\ndark blue indicates an improvement in performance and harder compilation (i.e., larger values of compilation time and/or memory usage)\nlight blue indicates no change in performance and easier compilation\nyellow indicates no change in performance and no change in compilation\nmagenta indicates no change in performance, an increase in compilation time, and a decrease in compilation memory usage\nred indicates no change in performance and harder compilation","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rows highlighted in green and blue present a clear advantage for unrolling, whereas those highlighted in yellow, magenta, and red either have no clear advantage, or they have a clear disadvantage. It is recommended that you only unroll when your use case is similar to a row in the first category.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The table is also printed out by this package's unit tests, so these measurements can be compared across different operating systems by checking the CI pipeline.","category":"page"}]
}
